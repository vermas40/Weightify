server <- function(input, output, session) {
observeEvent(input$ask, {
insertUI(
selector = "body",
ui = tags$div(
id = "module-pwd",
pwd_ui(id = "pwd")
)
)
})
output$res_pwd <- renderPrint({
reactiveValuesToList(pwd_out)
})
pwd_out <- callModule(
module = pwd_server,
id = "pwd",
user = reactiveValues(user = "me"),
update_pwd = function(user, pwd) {
# store the password somewhere
list(result = TRUE)
},
validate_pwd = function(x) return(TRUE)
)
observeEvent(pwd_out$relog, {
removeUI(selector = "#module-pwd")
})
}
shinyApp(ui, server)
}
library(shiny)
library(shinythemes)
library(shinymanager)
library(shinyjs)
library(scrypt)
?pwd_ui
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
?pwd_ui
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
?secure_server
if (interactive()) {
# define some credentials
credentials <- data.frame(
user = c("shiny", "shinymanager"),
password = c("azerty", "12345"),
stringsAsFactors = FALSE
)
library(shiny)
library(shinymanager)
ui <- fluidPage(
tags$h2("My secure application"),
verbatimTextOutput("auth_output")
)
# Wrap your UI with secure_app
ui <- secure_app(ui, choose_language = TRUE)
# change auth ui background ?
# ui <- secure_app(ui,
#                  background  = "linear-gradient(rgba(0, 0, 255, 0.5),
#                  rgba(255, 255, 0, 0.5)),
#                  url('https://www.r-project.org/logo/Rlogo.png')  no-repeat center fixed;")
server <- function(input, output, session) {
# call the server part
# check_credentials returns a function to authenticate users
res_auth <- secure_server(
check_credentials = check_credentials(credentials)
)
output$auth_output <- renderPrint({
reactiveValuesToList(res_auth)
})
observe({
print(input$shinymanager_where)
print(input$shinymanager_language)
})
# your classic server logic
}
shinyApp(ui, server)
}
if (interactive()) {
# define some credentials
credentials <- data.frame(
user = c("shiny", "shinymanager"),
password = c("azerty", "12345"),
stringsAsFactors = FALSE
)
library(shiny)
library(shinymanager)
ui <- fluidPage(
tags$h2("My secure application"),
verbatimTextOutput("auth_output")
)
# Wrap your UI with secure_app
ui <- secure_app(ui, choose_language = TRUE)
# change auth ui background ?
# ui <- secure_app(ui,
#                  background  = "linear-gradient(rgba(0, 0, 255, 0.5),
#                  rgba(255, 255, 0, 0.5)),
#                  url('https://www.r-project.org/logo/Rlogo.png')  no-repeat center fixed;")
server <- function(input, output, session) {
# call the server part
# check_credentials returns a function to authenticate users
res_auth <- secure_server(
check_credentials = check_credentials(credentials)
)
output$auth_output <- renderPrint({
reactiveValuesToList(res_auth)
})
# observe({
#   print(input$shinymanager_where)
#   print(input$shinymanager_language)
# })
# your classic server logic
}
shinyApp(ui, server)
}
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
user_list
user_list$user
user_list$user[1]
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
install.packages('docstring')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
?pwd_ui
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
?validate_pwd
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
View(user_data)
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
c(user_name,hashPassword(password),Sys.time(), TRUE)
user_name
user_name$user
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
user
reactiveValuesToList(result_auth)['user']
reactiveValuesToList(result_auth)[['user']]
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
input$cal_unit
input$wt_unit
input$curr_wt
input$goal_wt
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
((input$wt_unit != '') & (input$cal_unit != '') & (input$curr_wt != '')
& (input$goal_wt != '') & (input$loss_slope != ''))
is.null(NULL)
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
((input$wt_unit != '') & (input$cal_unit != '') & (is.null(input$curr_wt) == F)
& (is.null(input$goal_wt) == F) & (is.null(input$loss_slope) == F))
(is.null(input$loss_slope) == F)
is.null(input$loss_slope)
input$loss_slope
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
db_name <- 'weightloss.db'
#'This function changes password of a user
conn <- dbConnect(RSQLite::SQLite(),paste0(
'~/Documents/Documents/Side Projects/myWeightLossPal/',
db_name)
)
user_goals <- dbReadTable(conn,'user_goals')
View(user_goals)
user_goals <- rbind(user_goals,c('a','b',1,2,3,))
user_goals <- rbind(user_goals,c('a','b',1,2,3,'v','b'))
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
cc <- list('cc' = 1, 'bb' = 2)
chck <- data.frame(cc)
View(chck)
library(lubridate)
install.packages('lubridate')
year(Sys.date())
library(lubridate)
year(Sys.date())
year(Sys.time())
month(Sys.time())
week(Sys.time())
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
user
tagList(
navlistPanel(
' ',
id = ns('track_navlist_tabs'),
tabPanel('Goal Setting',goal_ui('goal')),
tabPanel('Daily Input'),
widths = c(2,10),
well = FALSE
)
)
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
library(tidyr)
install.packages('tidyr')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
View(user_data)
pivot_longer(user_data, cols = c('wt_unit','cal_unit','curr_wt',
'goal_wt','loss_slope'),
names_to = 'metric', values_to = 'value')
View(user_data)
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
install.packages('reshape2')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
View(user_data)
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
?dcast
?tidyr::spread
View(user_goals)
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
setwd("~/Documents/Documents/Side Projects/myWeightLossPal/shiny-app")
runApp()
runApp()
View(new_goal)
runApp()
View(user_goals)
View(user_goals)
duplicated(user_goals[,c('user','metric')])
!duplicated(user_goals[,c('user','metric')])
user_goals[!duplicated(user_goals[,c('user','metric')]),]
user_goals <<- user_goals[!duplicated(user_goals[,c('user','metric')]),]
user_goals <- user_goals[!duplicated(user_goals[,c('user','metric')]),]
View(user_goals)
spread(user_goals,'metric')
spread(user_goals,metric)
user_goal <<- user_goal
user_goals <<- user_goals
View(user_goals)
library(tidyr)
spread(user_goals,metric)
user_goals
reshape(user_goals, idvar = "metric",  direction = "wide")
reshape(user_goals, idvar = metric, direction = "wide")
?reshape
reshape(user_goals, idvar = c('user','date_created','year','month','week_in_yr','metric'), direction = "wide")
spread(user_goals,metric,value)
as.Date(1623598895)
?as.Date
as.Date(1623598895, origin = '01-01-1970')
as.Date(1623598895, origin = '1-1-1970')
as.Date(1623598895, origin = '1970-1-1')
View(user_goals)
runApp()
runApp()
runApp()
View(user_goals)
runApp('register.R')
runApp()
runApp()
View(user_goals)
runApp()
runApp()
shiny::runApp()
shiny::runApp()
register_ui <- function(id){
ns <- NS(id)
tagList(
fluidRow(shinyjs::useShinyjs(),
column(width = 4, offset = 0,
column(width = 9, offset = 0,
textInput(ns('user_name'),
'Choose a username'
)
), #close textInput
column(width = 3, offset = 0,
actionButton(ns('user_btn'),
'Check Availability',
#line-height is to vertically align
#the text inside the button to be in
#the middle of the shrunken button
style='height:34px; line-height:0px;
width:145px;'
),
style='margin-top:26px;'
)
)#close column
), #close fluidRow
fluidRow(
column(width = 4, offset = 0,
column(width = 9, offset = 0,
passwordInput(ns('pass'), 'Choose Password')
)#close column
)#close column
),#close fluidRow
fluidRow(
column(width = 4, offset = 0,
column(width = 9, offset = 0,
passwordInput(ns('confirm_pass'), 'Confirm Password')
),#close column
column(width = 3, offset = 0,
actionButton(ns('acct_btn'),
'Create Account',
#line-height is to vertically align
#the text inside the button to be in
#the middle of the shrunken button
style='height:34px; line-height:0px;
width:145px;'
),
style='margin-top:26px;'
)
)#close column
), #close fluidRow
fluidRow(
column(width = 4, offset = 0,
column(width = 9, offset = 2,
actionButton(ns('back_btn'),
'Back to login',
style='height:34px; line-height:0px;
width:145px;',
onclick ="window.open('http://google.com', '_blank')"
) #close actionButton
)
)#close column
) #close fluidRow
) #close tagList
}
register_server <- function(input, output, session){
shinyjs::disable('pass')
shinyjs::disable('confirm_pass')
shinyjs::disable('acct_btn')
#checking if the user name exists in the database or not
observeEvent(input$user_btn,{
#if the user name is taken then keep password disabled
#browser()
users_df <- get_app_users('weightloss.db')
if (input$user_name %in% users_df[['user']]){
showNotification('This username already exists',
type='error')
#disabling if they tried to create an account and that
#user name was already taken there
shinyjs::disable('pass')
shinyjs::disable('confirm_pass')
shinyjs::disable('acct_btn')
}else if (input$user_name == ''){
showNotification('Please enter a username!',
type='error')
#disabling if they tried to create an account and that
#user name was already taken there
shinyjs::disable('pass')
shinyjs::disable('confirm_pass')
shinyjs::disable('acct_btn')
}else{
#if user name is not taken then enable password entering
showNotification('This username is available',
type='message')
shinyjs::enable('pass')
shinyjs::enable('confirm_pass')
shinyjs::enable('acct_btn')
}
}
)
observeEvent(input$acct_btn,{
#allowing the user to create an account
users_df <- get_app_users('weightloss.db')
if ((input$pass == '') & (input$confirm_pass == '')){
#if the user does not enter a password and tries to make a password
#less account
showNotification('Please enter a password!',
type='error')
}else if ((input$pass == input$confirm_pass) &
!(input$user_name %in% users_df[['user']])){
#if the user tries to change username after entering password
#then that will be signaled as an error
create_acct('weightloss.db',input$user_name, input$pass)
showNotification('Account created!',
type='message')
}else{
showNotification('Check username or password!',
type='error')
}
}#close observeEvent
)#close observeEvent
}
runApp('register.R')
View(goal_ui)
library(httr)
install.packages(httr)
install.packages('httr')
library(httr)
GET(url = 'http://http://127.0.0.1:5000/ok')
GET(url = 'http://127.0.0.1:5000/ok')
r = GET(url = 'http://127.0.0.1:5000/ok')
df <- fromJSON(r,flatten = TRUE)
install.packages('jsonlite')
install.packages("jsonlite")
library(jsonlite)
df <- fromJSON(r,flatten = TRUE)
r = GET(url = 'http://127.0.0.1:5000/ok')
library(httr)
r = GET(url = 'http://127.0.0.1:5000/ok')
r
df <- fromJSON(r,flatten = TRUE)
content(r)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
