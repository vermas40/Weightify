# )
)
server <- function(input, output) {
# output$plot <- renderPlot({
#   input$go
#   Sys.sleep(1.5)
#   plot(runif(10))
# })
}
shinyApp(ui, server)
library(shiny)
library(dplyr)
ui <- fluidPage(
useShinyjs()
actionButton("go", "Go") %>% withSpinner()
# shinycssloaders::withSpinner(
#   plotOutput("plot")
# )
)
server <- function(input, output) {
Sys.sleep(1.5)
shinyjs::hide('go')
# output$plot <- renderPlot({
#   input$go
#   Sys.sleep(1.5)
#   plot(runif(10))
# })
}
shinyApp(ui, server)
library(shiny)
library(dplyr)
ui <- fluidPage(
useShinyjs()
actionButton("go", "Go") %>% withSpinner()
# shinycssloaders::withSpinner(
#   plotOutput("plot")
# )
)
server <- function(input, output) {
Sys.sleep(1.5)
observeEvent(input$go,{
shinyjs::hide('go')})
# output$plot <- renderPlot({
#   input$go
#   Sys.sleep(1.5)
#   plot(runif(10))
# })
}
shinyApp(ui, server)
library(shiny)
library(dplyr)
ui <- fluidPage(
useShinyjs()
actionButton("go", "Go") %>% withSpinner()
# shinycssloaders::withSpinner(
#   plotOutput("plot")
# )
)
server <- function(input, output) {
Sys.sleep(1.5)
observeEvent(input$go,{
print('came here')
shinyjs::hide('go')})
# output$plot <- renderPlot({
#   input$go
#   Sys.sleep(1.5)
#   plot(runif(10))
# })
}
shinyApp(ui, server)
library(shiny)
library(dplyr)
ui <- fluidPage(
useShinyjs()
actionButton("go", "Go") %>% withSpinner()
# shinycssloaders::withSpinner(
#   plotOutput("plot")
# )
)
server <- function(input, output) {
Sys.sleep(1.5)
observeEvent(input$go,{
print('came here')
hide('go')})
# output$plot <- renderPlot({
#   input$go
#   Sys.sleep(1.5)
#   plot(runif(10))
# })
}
shinyApp(ui, server)
library(shiny)
library(dplyr)
library(shinyjs)
ui <- fluidPage(
useShinyjs()
actionButton("go", "Go") %>% withSpinner()
# shinycssloaders::withSpinner(
#   plotOutput("plot")
# )
)
server <- function(input, output) {
Sys.sleep(1.5)
observeEvent(input$go,{
print('came here')
hide('go')})
# output$plot <- renderPlot({
#   input$go
#   Sys.sleep(1.5)
#   plot(runif(10))
# })
}
shinyApp(ui, server)
library(shiny)
library(dplyr)
library(shinyjs)
ui <- fluidPage(
useShinyjs()
actionButton("go", "Go") %>% withSpinner()
# shinycssloaders::withSpinner(
#   plotOutput("plot")
# )
)
server <- function(input, output) {
Sys.sleep(1.5)
observeEvent(input$go,{
print('came here')
hideElement('go')})
# output$plot <- renderPlot({
#   input$go
#   Sys.sleep(1.5)
#   plot(runif(10))
# })
}
shinyApp(ui, server)
library(shiny)
library(dplyr)
library(shinyjs)
ui <- fluidPage(
useShinyjs()
actionButton("go", "Go") %>% withSpinner()
# shinycssloaders::withSpinner(
#   plotOutput("plot")
# )
)
server <- function(input, output) {
Sys.sleep(1.5)
observeEvent(input$go,{
print('came here')
hideElement(id='go')})
# output$plot <- renderPlot({
#   input$go
#   Sys.sleep(1.5)
#   plot(runif(10))
# })
}
shinyApp(ui, server)
library(shiny)
library(dplyr)
library(shinyjs)
ui <- fluidPage(
useShinyjs()
hidden(actionButton("go", "Go") %>% withSpinner())
# shinycssloaders::withSpinner(
#   plotOutput("plot")
# )
)
server <- function(input, output) {
Sys.sleep(1.5)
observeEvent(input$go,{
print('came here')
hideElement(id='go')})
# output$plot <- renderPlot({
#   input$go
#   Sys.sleep(1.5)
#   plot(runif(10))
# })
}
shinyApp(ui, server)
library(shiny)
library(dplyr)
library(shinyjs)
ui <- fluidPage(
useShinyjs()
hidden(actionButton("go", "Go") %>% withSpinner())
# shinycssloaders::withSpinner(
#   plotOutput("plot")
# )
)
server <- function(input, output) {
Sys.sleep(1.5)
observeEvent(input$go,{
print('came here')
toggle(id='go')})
# output$plot <- renderPlot({
#   input$go
#   Sys.sleep(1.5)
#   plot(runif(10))
# })
}
shinyApp(ui, server)
library(shiny)
library(dplyr)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),
actionButton("go", "Go") %>% withSpinner()
# shinycssloaders::withSpinner(
#   plotOutput("plot")
# )
)
server <- function(input, output) {
Sys.sleep(1.5)
observeEvent(input$go,{
print('came here')
hide(id='go')})
# output$plot <- renderPlot({
#   input$go
#   Sys.sleep(1.5)
#   plot(runif(10))
# })
}
shinyApp(ui, server)
library(shiny)
library(magrittr)
shinyApp(
ui = fluidPage(
sliderInput("x", "x", 1, 10, 5),
sliderInput("y", "y", 1, 10, 5),
div("x * y: "),
verbatimTextOutput("txt")
),
server = function(input, output) {
r <- reactive({
# The value expression is an _expensive_ computation
message("Doing expensive computation...")
Sys.sleep(2)
input$x * input$y
}) %>%
bindCache(input$x, input$y)
output$txt <- renderText(r())
}
)
library(shiny)
library(magrittr)
shinyApp(
fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("n", "Number of points", 4, 32, value = 8, step = 4)
),
mainPanel(plotOutput("plot"))
)
),
function(input, output, session) {
output$plot <- renderPlot({
Sys.sleep(2)  # Add an artificial delay
rownums <- seq_len(input$n)
plot(cars$speed[rownums], cars$dist[rownums],
xlim = range(cars$speed), ylim = range(cars$dist))
}) %>%
bindCache(input$n)
}
)
library(shiny)
library(magrittr)
shinyApp(
fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("n", "Number of points", 4, 32, value = 8, step = 4),
actionButton("go", "Draw plot")
),
mainPanel(plotOutput("plot"))
)
),
function(input, output, session) {
output$plot <- renderPlot({
Sys.sleep(2)  # Add an artificial delay
rownums <- seq_len(input$n)
plot(cars$speed[rownums], cars$dist[rownums],
xlim = range(cars$speed), ylim = range(cars$dist))
}) %>%
bindCache(input$n) %>%
bindEvent(input$go)
}
)
library(shiny)
ui <- fluidPage(
actionButton("go", "Go"),
shinycssloaders::withSpinner(
plotOutput("plot")
)
)
server <- function(input, output) {
output$plot <- renderPlot({
input$go
Sys.sleep(1.5)
plot(runif(10))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
actionButton("go", "Go"),
shinycssloaders::withSpinner(
plotOutput("plot")
)
)
server <- function(input, output) {
# output$plot <- renderPlot({
#   input$go
#   Sys.sleep(1.5)
#   plot(runif(10))
# })
}
shinyApp(ui, server)
?useshinyJS
?useshinyjs
library(shiny)
library(shinyjs)
ui <- fluidPage(useShinyjs(),
actionButton("go", "Go"),
shinycssloaders::withSpinner(
plotOutput("plot")
)
)
server <- function(input, output) {
hide('plot')
# output$plot <- renderPlot({
#   input$go
#   Sys.sleep(1.5)
#   plot(runif(10))
# })
}
shinyApp(ui, server)
library(shiny)
library(shinyjs)
ui <- fluidPage(useShinyjs(),
actionButton("go", "Go"),
shinycssloaders::withSpinner(
plotOutput("plot")
)
)
server <- function(input, output) {
hide(plotOutput('plot'))
# output$plot <- renderPlot({
#   input$go
#   Sys.sleep(1.5)
#   plot(runif(10))
# })
}
shinyApp(ui, server)
library(shiny)
library(shinyjs)
ui <- fluidPage(useShinyjs(),
actionButton("go", "Go"),
shinycssloaders::withSpinner(
plotOutput("plot")
)
)
server <- function(input, output) {
hide(  shinycssloaders::withSpinner(
plotOutput("plot")
))
# output$plot <- renderPlot({
#   input$go
#   Sys.sleep(1.5)
#   plot(runif(10))
# })
}
shinyApp(ui, server)
library(shiny)
library(shinyjs)
ui <- fluidPage(useShinyjs(),
actionButton("go", "Go"),
hidden(div(shinycssloaders::withSpinner(
plotOutput("plot")
)))
)
server <- function(input, output) {
toggle(id='plot',condition = FALSE)
# output$plot <- renderPlot({
#   input$go
#   Sys.sleep(1.5)
#   plot(runif(10))
# })
}
shinyApp(ui, server)
library(shiny)
library(shinyjs)
ui <- fluidPage(useShinyjs(),
actionButton("go", "Go"),
hidden(div(shinycssloaders::withSpinner(
plotOutput("plot")
)))
)
server <- function(input, output) {
toggle(id='plot',condition = FALSE)
output$plot <- renderPlot({
input$go
toggle(id='plot',condition=TRUE)
Sys.sleep(1.5)
plot(runif(10))
})
}
shinyApp(ui, server)
library(shiny)
library(shinyjs)
ui <- fluidPage(useShinyjs(),
actionButton("go", "Go"),
hidden(div(shinycssloaders::withSpinner(
plotOutput("plot")
)))
)
server <- function(input, output) {
toggle(id='plot',condition = FALSE)
output$plot <- renderPlot({
input$go
toggle(id='plot',condition=TRUE)
Sys.sleep(1.5)
plot(runif(10))
})
}
shinyApp(ui, server)
library(shiny)
library(shinyjs)
ui <- fluidPage(useShinyjs(),
actionButton("go", "Go"),
hidden(div(id='test',shinycssloaders::withSpinner(
plotOutput("plot")
)))
)
server <- function(input, output) {
toggle(id='test',condition = FALSE)
output$plot <- renderPlot({
input$go
toggle(id='test',condition=TRUE)
Sys.sleep(1.5)
plot(runif(10))
})
}
shinyApp(ui, server)
library(shiny)
library(shinyjs)
ui <- fluidPage(useShinyjs(),
actionButton("go", "Go"),
hidden(div(id='test',shinycssloaders::withSpinner(
plotOutput("plot")
)))
)
server <- function(input, output) {
toggle(id='plot',condition = FALSE)
output$plot <- renderPlot({
input$go
toggle(id='plot',condition=TRUE)
Sys.sleep(1.5)
plot(runif(10))
})
}
shinyApp(ui, server)
library(shinycssloaders)
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),
selectInput(inputId = "something",
label = "Select something:",
choices = c('','None', 'All', 'Some'),
selected = ''),
hidden(div(id = 'test', withSpinner(textOutput(outputId = "text"))))
)
server <- function(input, output) {
observe({
toggle(id = 'text', condition = FALSE)
if(nchar(input$something) > 0 ){
show('test')
toggle(id = 'text', condition = TRUE)
Sys.sleep(1)
output$text <- renderText(paste("You chose ", input$something))
}
})
}
shinyApp(ui, server)
library(shiny)
library(shinyjs)
ui <- fluidPage(useShinyjs(),
actionButton("go", "Go"),
hidden(div(id='test',shinycssloaders::withSpinner(
plotOutput("plot")
)))
)
server <- function(input, output) {
toggle(id='plot',condition = FALSE)
output$plot <- renderPlot({
input$go
show('test')
toggle(id='plot',condition=TRUE)
Sys.sleep(1.5)
plot(runif(10))
})
}
shinyApp(ui, server)
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
install.packages('shinythemes')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
