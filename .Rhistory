)
server <- function(input, output) {
toggle(id='test',condition = FALSE)
output$plot <- renderPlot({
input$go
toggle(id='test',condition=TRUE)
Sys.sleep(1.5)
plot(runif(10))
})
}
shinyApp(ui, server)
library(shiny)
library(shinyjs)
ui <- fluidPage(useShinyjs(),
actionButton("go", "Go"),
hidden(div(id='test',shinycssloaders::withSpinner(
plotOutput("plot")
)))
)
server <- function(input, output) {
toggle(id='plot',condition = FALSE)
output$plot <- renderPlot({
input$go
toggle(id='plot',condition=TRUE)
Sys.sleep(1.5)
plot(runif(10))
})
}
shinyApp(ui, server)
library(shinycssloaders)
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),
selectInput(inputId = "something",
label = "Select something:",
choices = c('','None', 'All', 'Some'),
selected = ''),
hidden(div(id = 'test', withSpinner(textOutput(outputId = "text"))))
)
server <- function(input, output) {
observe({
toggle(id = 'text', condition = FALSE)
if(nchar(input$something) > 0 ){
show('test')
toggle(id = 'text', condition = TRUE)
Sys.sleep(1)
output$text <- renderText(paste("You chose ", input$something))
}
})
}
shinyApp(ui, server)
library(shiny)
library(shinyjs)
ui <- fluidPage(useShinyjs(),
actionButton("go", "Go"),
hidden(div(id='test',shinycssloaders::withSpinner(
plotOutput("plot")
)))
)
server <- function(input, output) {
toggle(id='plot',condition = FALSE)
output$plot <- renderPlot({
input$go
show('test')
toggle(id='plot',condition=TRUE)
Sys.sleep(1.5)
plot(runif(10))
})
}
shinyApp(ui, server)
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
dateInput("date1", "Date:", value = "2012-02-29"),
# Default value is the date in client's time zone
dateInput("date2", "Date:"),
# value is always yyyy-mm-dd, even if the display format is different
dateInput("date3", "Date:", value = "2012-02-29", format = "mm/dd/yy"),
# Pass in a Date object
dateInput("date4", "Date:", value = Sys.Date()-10),
# Use different language and different first day of week
dateInput("date5", "Date:",
language = "ru",
weekstart = 1),
# Start with decade view instead of default month view
dateInput("date6", "Date:",
startview = "decade"),
# Disable Mondays and Tuesdays.
dateInput("date7", "Date:", daysofweekdisabled = c(1,2)),
# Disable specific dates.
dateInput("date8", "Date:", value = "2012-02-29",
datesdisabled = c("2012-03-01", "2012-03-02"))
)
shinyApp(ui, server = function(input, output) { })
}
Sys.Date()
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
library(shinyauthr)
install.packages('shinyauthr')
r
install.packages('remotes')
remotes::install_github("paulc91/shinyauthr")
library(shinyauthr)
library(shiny)
# dataframe that holds usernames, passwords and other user data
user_base <- tibble::tibble(
user = c("user1", "user2"),
password = c("pass1", "pass2"),
permissions = c("admin", "standard"),
name = c("User One", "User Two")
)
ui <- fluidPage(
# add logout button UI
div(class = "pull-right", shinyauthr::logoutUI(id = "logout")),
# add login panel UI function
shinyauthr::loginUI(id = "login"),
# setup table output to show user info after login
tableOutput("user_table")
)
server <- function(input, output, session) {
# call the logout module with reactive trigger to hide/show
logout_init <- callModule(
shinyauthr::logout,
id = "logout",
active = reactive(credentials()$user_auth)
)
# call login module supplying data frame, user and password cols
# and reactive trigger
credentials <- callModule(
shinyauthr::login,
id = "login",
data = user_base,
user_col = user,
pwd_col = password,
log_out = reactive(logout_init())
)
# pulls out the user information returned from login module
user_data <- reactive({
credentials()$info
})
output$user_table <- renderTable({
# use req to only render results when credentials()$user_auth is TRUE
req(credentials()$user_auth)
user_data()
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinydashboard)
library(shinyauthr)
library(dplyr)
library(shinyjs)
library(DT)
# sample logins dataframe with passwords hashed by sodium package
user_base <- tibble(
user = c("user1", "user2"),
password = sapply(c("pass1", "pass2"), sodium::password_store),
permissions = c("admin", "standard"),
name = c("User One", "User Two")
)
ui <- dashboardPage(
# put the shinyauthr logout ui module in here
dashboardHeader(
title = "shinyauthr",
tags$li(class = "dropdown", style = "padding: 8px;", shinyauthr::logoutUI("logout"))
),
# setup a sidebar menu to be rendered server-side
dashboardSidebar(
collapsed = TRUE, sidebarMenuOutput("sidebar")
),
dashboardBody(
shinyjs::useShinyjs(),
# put the shinyauthr login ui module here
shinyauthr::loginUI("login"),
# setup any tab pages you want after login here with uiOutputs
tabItems(
tabItem("tab1", uiOutput("tab1_ui")),
tabItem("tab2", uiOutput("tab2_ui"))
)
)
)
server <- function(input, output, session) {
# login status and info will be managed by shinyauthr module and stores here
credentials <- callModule(shinyauthr::login, "login",
data = user_base,
user_col = user,
pwd_col = password,
sodium_hashed = TRUE,
log_out = reactive(logout_init()))
# logout status managed by shinyauthr module and stored here
logout_init <- callModule(shinyauthr::logout, "logout", reactive(credentials()$user_auth))
# this opens or closes the sidebar on login/logout
observe({
if(credentials()$user_auth) {
shinyjs::removeClass(selector = "body", class = "sidebar-collapse")
} else {
shinyjs::addClass(selector = "body", class = "sidebar-collapse")
}
})
# only when credentials()$user_auth is TRUE, render your desired sidebar menu
output$sidebar <- renderMenu({
req(credentials()$user_auth)
sidebarMenu(
id = "tabs",
menuItem("Storms Data", tabName = "tab1"),
menuItem("Starwars Data", tabName = "tab2")
)
})
# tab 1 UI and output ----------------------------------------
output$tab1_ui <- renderUI({
req(credentials()$user_auth)
DT::DTOutput("table1")
})
output$table1 <- DT::renderDT({
DT::datatable(dplyr::storms, options = list(scrollX = TRUE))
})
# tab 2 UI and output ----------------------------------------
output$tab2_ui <- renderUI({
req(credentials()$user_auth)
DT::DTOutput("table2")
})
output$table2 <- DT::renderDT({
DT::datatable(dplyr::starwars[,1:10], options = list(scrollX = TRUE))
})
}
shiny::shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(shinyauthr)
library(dplyr)
library(shinyjs)
library(DT)
# sample logins dataframe with passwords hashed by sodium package
user_base <- tibble(
user = c("user1", "user2"),
password = sapply(c("pass1", "pass2"), sodium::password_store),
permissions = c("admin", "standard"),
name = c("User One", "User Two")
)
ui <- dashboardPage(
# put the shinyauthr logout ui module in here
dashboardHeader(
title = "shinyauthr",
tags$li(class = "dropdown", style = "padding: 8px;", shinyauthr::logoutUI("logout"))
),
# setup a sidebar menu to be rendered server-side
dashboardSidebar(
collapsed = TRUE, sidebarMenuOutput("sidebar")
),
dashboardBody(
shinyjs::useShinyjs(),
# put the shinyauthr login ui module here
shinyauthr::loginUI("login"),
# setup any tab pages you want after login here with uiOutputs
tabItems(
tabItem("tab1", uiOutput("tab1_ui")),
tabItem("tab2", uiOutput("tab2_ui"))
)
)
)
server <- function(input, output, session) {
# login status and info will be managed by shinyauthr module and stores here
credentials <- callModule(shinyauthr::login, "login",
data = user_base,
user_col = user,
pwd_col = password,
sodium_hashed = TRUE,
log_out = reactive(logout_init()))
# logout status managed by shinyauthr module and stored here
logout_init <- callModule(shinyauthr::logout, "logout", reactive(credentials()$user_auth))
# this opens or closes the sidebar on login/logout
observe({
if(credentials()$user_auth) {
shinyjs::removeClass(selector = "body", class = "sidebar-collapse")
} else {
shinyjs::addClass(selector = "body", class = "sidebar-collapse")
}
})
# only when credentials()$user_auth is TRUE, render your desired sidebar menu
output$sidebar <- renderMenu({
req(credentials()$user_auth)
sidebarMenu(
id = "tabs",
menuItem("Storms Data", tabName = "tab1"),
menuItem("Starwars Data", tabName = "tab2")
)
})
# tab 1 UI and output ----------------------------------------
output$tab1_ui <- renderUI({
req(credentials()$user_auth)
DT::DTOutput("table1")
})
output$table1 <- DT::renderDT({
DT::datatable(dplyr::storms, options = list(scrollX = TRUE))
})
# tab 2 UI and output ----------------------------------------
output$tab2_ui <- renderUI({
req(credentials()$user_auth)
DT::DTOutput("table2")
})
output$table2 <- DT::renderDT({
DT::datatable(dplyr::starwars[,1:10], options = list(scrollX = TRUE))
})
}
shiny::shinyApp(ui, server)
library(shinydashboard)
install.packages('shinydashboard')
install.packages('DT')
library(dplyr)
library(shiny)
library(shinydashboard)
library(shinyauthr)
library(dplyr)
library(shinyjs)
library(DT)
# sample logins dataframe with passwords hashed by sodium package
user_base <- tibble(
user = c("user1", "user2"),
password = sapply(c("pass1", "pass2"), sodium::password_store),
permissions = c("admin", "standard"),
name = c("User One", "User Two")
)
ui <- dashboardPage(
# put the shinyauthr logout ui module in here
dashboardHeader(
title = "shinyauthr",
tags$li(class = "dropdown", style = "padding: 8px;", shinyauthr::logoutUI("logout"))
),
# setup a sidebar menu to be rendered server-side
dashboardSidebar(
collapsed = TRUE, sidebarMenuOutput("sidebar")
),
dashboardBody(
shinyjs::useShinyjs(),
# put the shinyauthr login ui module here
shinyauthr::loginUI("login"),
# setup any tab pages you want after login here with uiOutputs
tabItems(
tabItem("tab1", uiOutput("tab1_ui")),
tabItem("tab2", uiOutput("tab2_ui"))
)
)
)
server <- function(input, output, session) {
# login status and info will be managed by shinyauthr module and stores here
credentials <- callModule(shinyauthr::login, "login",
data = user_base,
user_col = user,
pwd_col = password,
sodium_hashed = TRUE,
log_out = reactive(logout_init()))
# logout status managed by shinyauthr module and stored here
logout_init <- callModule(shinyauthr::logout, "logout", reactive(credentials()$user_auth))
# this opens or closes the sidebar on login/logout
observe({
if(credentials()$user_auth) {
shinyjs::removeClass(selector = "body", class = "sidebar-collapse")
} else {
shinyjs::addClass(selector = "body", class = "sidebar-collapse")
}
})
# only when credentials()$user_auth is TRUE, render your desired sidebar menu
output$sidebar <- renderMenu({
req(credentials()$user_auth)
sidebarMenu(
id = "tabs",
menuItem("Storms Data", tabName = "tab1"),
menuItem("Starwars Data", tabName = "tab2")
)
})
# tab 1 UI and output ----------------------------------------
output$tab1_ui <- renderUI({
req(credentials()$user_auth)
DT::DTOutput("table1")
})
output$table1 <- DT::renderDT({
DT::datatable(dplyr::storms, options = list(scrollX = TRUE))
})
# tab 2 UI and output ----------------------------------------
output$tab2_ui <- renderUI({
req(credentials()$user_auth)
DT::DTOutput("table2")
})
output$table2 <- DT::renderDT({
DT::datatable(dplyr::starwars[,1:10], options = list(scrollX = TRUE))
})
}
shiny::shinyApp(ui, server)
library(shiny); runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/scratch.R')
credentials()
credentials
credentials()
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/scratch.R')
?req
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/scratch.R')
library(shiny)
library(shinythemes)
#background color of navbar is 375A7F
ui <- shinyauthr::loginUI('login')
server <- function(input, output, session){
}
library(shiny)
library(shinythemes)
#background color of navbar is 375A7F
ui <- shinyauthr::loginUI('login')
server <- function(input, output, session){
}
shinyApp(ui, server)
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
?secure_server
library(shiny); runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register_ui.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register_ui.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register_ui.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register_ui.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register_ui.R')
library(shiny); runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
checkboxGroupInput('in1', 'Check some letters', choices = head(LETTERS)),
selectizeInput('in2', 'Select a state', choices = state.name),
plotOutput('plot')
)
server <- function(input, output) {
output$plot <- renderPlot({
validate(
need(input$in1, 'Check at least one letter!'),
need(input$in2 != '', 'Please choose a state.')
)
plot(1:10, main = paste(c(input$in1, input$in2), collapse = ', '))
})
}
shinyApp(ui, server)
}
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
library(shiny); runApp('register.R')
runApp('register.R')
View(users_df)
runApp('register.R')
runApp('register.R')
View(users_df)
runApp('register.R')
runApp()
