library(plotly)
conn <- create_db_connection('weightloss.db')
df <- dbReadTable(conn,'tdee_hist')
View(df)
df <- df[which(df['user']=='123'),]
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
library(shiny); runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
R
r
packrat
library(packrat)
install.packages('packrat')
library(packrat)
snapshot()
?snapshot
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
conn <- create_db_connection('weightloss.db')
df <- dbReadTable(conn,'weighing_scale')
df <- df[which(df['user']=='zeus'),]
View(df)
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
?runApp
?shiny::runApp
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
?shiny::runApp
library(shiny)
library(shinythemes)
library(shinymanager)
library(shinyjs)
library(scrypt)
library(DBI)
library(RSQLite)
library(docstring)
library(lubridate)
library(dplyr)
library(tidyr)
library(httr)
library(plotly)
source('track/track_ui.R')
source('track/goal_ui.R')
source('track/daily_input_ui.R')
source('login/pass_change_ui.R')
source('functions/helper_functions.R')
source('functions/plotting_functions.R')
source('functions/sql_queries.R')
#background color of navbar is 375A7F
options(shiny.port = 4000)
options(shiny.host = "0.0.0.0")
set_labels(
language = 'en',
'Please authenticate' = 'Get back into it'
)
ui <- secure_app(
navbarPage(title=div(img(src='body-scale.png', style='margin-top:-14px;',
height=45)),
header='', id='main_navbar', windowTitle='My Weight Loss Pal',
theme=shinytheme('darkly'),
tabPanel('Track', track_ui('track')),
tabPanel('Change Password',pass_change_ui('pass')),
includeCSS('www/bootstrap.css') #including custom css to overwrite darkly theme
), theme = shinytheme('darkly'), #using darkly theme for login dialog box
#making background black gradient for the rest of the page
#and adding a background
background = "linear-gradient(rgba(48, 48, 48, 0.5),
rgba(48, 48, 48, 0.5)),
url('icons.png');",
tags_bottom = tags$div(
tags$p(
"New User? ",
tags$a(
href = "//127.0.0.1:8000", #linking to the registration app
target="_blank", "Create an account"
)
)
) #close tags_bottom
)#close secure_app
server <- function(input,output,session){
#pulling the app users data
user_data <- get_app_users('weightloss.db')
#checking credentials if they are correct
result_auth <- secure_server(check_credentials = check_credentials(user_data))
#if user changes tab to change password tab then run the below code
observeEvent(input$main_navbar,{
user <- reactiveValuesToList(result_auth)[['user']]
if (input$main_navbar == 'Change Password'){
callModule(pass_server, 'pass', user)
}else if (input$main_navbar == 'Track'){
callModule(goal_server, 'goal', user)
callModule(daily_input_server, 'daily', user)
}
})
}
shinyApp(ui = ui, server = server)
runApp()
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
create_db_connection <- function(db_name){
conn <- dbConnect(RSQLite::SQLite(),paste0(
"/Users/mac_air/documents/documents/'Side Projects'/myWeightLossPal/database/",db_name))
return(conn)
}
create_db_connection('weightloss.db')
paste0(
"/Users/mac_air/documents/documents/'Side Projects'/myWeightLossPal/database/",db_name)
db_name = cc
db_name = 'cc'
paste0(
"/Users/mac_air/documents/documents/'Side Projects'/myWeightLossPal/database/",db_name)
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app/register_app/register.R')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app/register_app/register.R')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app/register.R')
shiny::runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
library(shiny)
?sliderInput
cc <- as.character(sliderInput('cc','label',min=1, max=100, value=19))
cc
dd <- as.character(sliderInput('cc','label',min=1, max=100, value=22))
dd
install.packages('bslib')
ui <- fluidPage(
tags$h1("Pretty toggles: inline example"),
br(),
prettyToggle(
inputId = "toggle1",
label_on = "Checked!",
label_off = "Unchecked...",
inline = TRUE
),
prettyToggle(
inputId = "toggle2",
label_on = "Yep",
status_on = "default",
icon_on = icon("ok-circle", lib = "glyphicon"),
label_off = "Nope",
status_off = "default",
icon_off = icon("remove-circle", lib = "glyphicon"),
plain = TRUE,
inline = TRUE
),
prettyToggle(
inputId = "toggle3",
label_on = "",
label_off = "",
icon_on = icon("volume-up", lib = "glyphicon"),
icon_off = icon("volume-off", lib = "glyphicon"),
status_on = "primary",
status_off = "default",
plain = TRUE,
outline = TRUE,
bigger = TRUE,
inline = TRUE
),
prettyToggle(
inputId = "toggle4",
label_on = "Yes!",
label_off = "No..",
outline = TRUE,
plain = TRUE,
icon_on = icon("thumbs-up"),
icon_off = icon("thumbs-down"),
inline = TRUE
),
verbatimTextOutput(outputId = "res")
)
server <- function(input, output, session) {
output$res <- renderPrint(
c(input$toggle1,
input$toggle2,
input$toggle3,
input$toggle4)
)
}
if (interactive())
shinyApp(ui, server)
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
tags$h1("Pretty toggles: inline example"),
br(),
prettyToggle(
inputId = "toggle1",
label_on = "Checked!",
label_off = "Unchecked...",
inline = TRUE
),
prettyToggle(
inputId = "toggle2",
label_on = "Yep",
status_on = "default",
icon_on = icon("ok-circle", lib = "glyphicon"),
label_off = "Nope",
status_off = "default",
icon_off = icon("remove-circle", lib = "glyphicon"),
plain = TRUE,
inline = TRUE
),
prettyToggle(
inputId = "toggle3",
label_on = "",
label_off = "",
icon_on = icon("volume-up", lib = "glyphicon"),
icon_off = icon("volume-off", lib = "glyphicon"),
status_on = "primary",
status_off = "default",
plain = TRUE,
outline = TRUE,
bigger = TRUE,
inline = TRUE
),
prettyToggle(
inputId = "toggle4",
label_on = "Yes!",
label_off = "No..",
outline = TRUE,
plain = TRUE,
icon_on = icon("thumbs-up"),
icon_off = icon("thumbs-down"),
inline = TRUE
),
verbatimTextOutput(outputId = "res")
)
server <- function(input, output, session) {
output$res <- renderPrint(
c(input$toggle1,
input$toggle2,
input$toggle3,
input$toggle4)
)
}
if (interactive())
shinyApp(ui, server)
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
?prettyCheckbox
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
tags$h1("Pretty checkbox: inline example"),
br(),
prettyCheckbox(
inputId = "checkbox1",
label = "Click me!",
status = "success",
outline = TRUE,
inline = TRUE
),
prettyCheckbox(
inputId = "checkbox2",
label = "Click me!",
thick = TRUE,
shape = "curve",
animation = "pulse",
status = "info",
inline = TRUE
),
prettyCheckbox(
inputId = "checkbox3",
label = "Click me!",
shape = "round",
status = "danger",
value = TRUE,
inline = TRUE
),
prettyCheckbox(
inputId = "checkbox4",
label = "Click me!",
outline = TRUE,
plain = TRUE,
animation = "rotate",
icon = icon("thumbs-up"),
inline = TRUE
),
prettyCheckbox(
inputId = "checkbox5",
label = "Click me!",
icon = icon("check"),
animation = "tada",
status = "primary",
inline = TRUE
),
verbatimTextOutput(outputId = "res")
)
server <- function(input, output, session) {
output$res <- renderPrint(
c(input$checkbox1,
input$checkbox2,
input$checkbox3,
input$checkbox4,
input$checkbox5)
)
}
if (interactive())
shinyApp(ui, server)
ui <- fluidPage(
tags$h1("Pretty checkbox"),
br(),
fluidRow(
column(
width = 4,
prettyCheckbox(
inputId = "checkbox1",
label = "Click me!"
),
verbatimTextOutput(outputId = "res1"),
br(),
prettyCheckbox(
inputId = "checkbox4",
label = "Click me!",
outline = TRUE,
plain = TRUE,
icon = icon("thumbs-up")
),
verbatimTextOutput(outputId = "res4")
),
column(
width = 4,
prettyCheckbox(
inputId = "checkbox2",
label = "Click me!",
thick = TRUE,
animation = "pulse",
status = "info"
),
verbatimTextOutput(outputId = "res2"),
br(),
prettyCheckbox(
inputId = "checkbox5",
label = "Click me!",
icon = icon("check"),
animation = "tada",
status = "default"
),
verbatimTextOutput(outputId = "res5")
),
column(
width = 4,
prettyCheckbox(
inputId = "checkbox3",
label = "Click me!",
shape = "round",
status = "danger",
fill = TRUE,
value = TRUE
),
verbatimTextOutput(outputId = "res3")
)
)
)
server <- function(input, output, session) {
output$res1 <- renderPrint(input$checkbox1)
output$res2 <- renderPrint(input$checkbox2)
output$res3 <- renderPrint(input$checkbox3)
output$res4 <- renderPrint(input$checkbox4)
output$res5 <- renderPrint(input$checkbox5)
}
if (interactive())
shinyApp(ui, server)
ui <- fluidPage(
tags$h1("Pretty checkbox"),
br(),
fluidRow(
column(
width = 4,
prettyCheckbox(
inputId = "checkbox1",
label = "Click me!"
),
verbatimTextOutput(outputId = "res1"),
br(),
prettyCheckbox(
inputId = "checkbox4",
label = "Click me!",
outline = TRUE,
plain = TRUE,
icon = icon("thumbs-up")
),
verbatimTextOutput(outputId = "res4")
),
column(
width = 4,
prettyCheckbox(
inputId = "checkbox2",
label = "Click me!",
thick = TRUE,
animation = "pulse",
status = "info"
),
verbatimTextOutput(outputId = "res2"),
br(),
prettyCheckbox(
inputId = "checkbox5",
label = "Click me!",
icon = icon("check"),
animation = "tada",
status = "default"
),
verbatimTextOutput(outputId = "res5")
),
column(
width = 4,
prettyCheckbox(
inputId = "checkbox3",
label = "Click me!",
shape = "curve",
status = "danger",
fill = TRUE,
value = TRUE
),
verbatimTextOutput(outputId = "res3")
)
)
)
server <- function(input, output, session) {
output$res1 <- renderPrint(input$checkbox1)
output$res2 <- renderPrint(input$checkbox2)
output$res3 <- renderPrint(input$checkbox3)
output$res4 <- renderPrint(input$checkbox4)
output$res5 <- renderPrint(input$checkbox5)
}
if (interactive())
shinyApp(ui, server)
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
?bs_theme
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
session
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
library(htmltools) #EXPERIMENTAL
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
?bs_add_variables
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/side_projects/myWeightLossPal/shiny-app')
setwd("~/Documents/Documents/side_projects/myWeightLossPal/shiny-app")
shiny::runApp()
input$dark_mode_sw
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?addCssClass
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
