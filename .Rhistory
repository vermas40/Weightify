library(dplyr)
library(shiny)
library(shinydashboard)
library(shinyauthr)
library(dplyr)
library(shinyjs)
library(DT)
# sample logins dataframe with passwords hashed by sodium package
user_base <- tibble(
user = c("user1", "user2"),
password = sapply(c("pass1", "pass2"), sodium::password_store),
permissions = c("admin", "standard"),
name = c("User One", "User Two")
)
ui <- dashboardPage(
# put the shinyauthr logout ui module in here
dashboardHeader(
title = "shinyauthr",
tags$li(class = "dropdown", style = "padding: 8px;", shinyauthr::logoutUI("logout"))
),
# setup a sidebar menu to be rendered server-side
dashboardSidebar(
collapsed = TRUE, sidebarMenuOutput("sidebar")
),
dashboardBody(
shinyjs::useShinyjs(),
# put the shinyauthr login ui module here
shinyauthr::loginUI("login"),
# setup any tab pages you want after login here with uiOutputs
tabItems(
tabItem("tab1", uiOutput("tab1_ui")),
tabItem("tab2", uiOutput("tab2_ui"))
)
)
)
server <- function(input, output, session) {
# login status and info will be managed by shinyauthr module and stores here
credentials <- callModule(shinyauthr::login, "login",
data = user_base,
user_col = user,
pwd_col = password,
sodium_hashed = TRUE,
log_out = reactive(logout_init()))
# logout status managed by shinyauthr module and stored here
logout_init <- callModule(shinyauthr::logout, "logout", reactive(credentials()$user_auth))
# this opens or closes the sidebar on login/logout
observe({
if(credentials()$user_auth) {
shinyjs::removeClass(selector = "body", class = "sidebar-collapse")
} else {
shinyjs::addClass(selector = "body", class = "sidebar-collapse")
}
})
# only when credentials()$user_auth is TRUE, render your desired sidebar menu
output$sidebar <- renderMenu({
req(credentials()$user_auth)
sidebarMenu(
id = "tabs",
menuItem("Storms Data", tabName = "tab1"),
menuItem("Starwars Data", tabName = "tab2")
)
})
# tab 1 UI and output ----------------------------------------
output$tab1_ui <- renderUI({
req(credentials()$user_auth)
DT::DTOutput("table1")
})
output$table1 <- DT::renderDT({
DT::datatable(dplyr::storms, options = list(scrollX = TRUE))
})
# tab 2 UI and output ----------------------------------------
output$tab2_ui <- renderUI({
req(credentials()$user_auth)
DT::DTOutput("table2")
})
output$table2 <- DT::renderDT({
DT::datatable(dplyr::starwars[,1:10], options = list(scrollX = TRUE))
})
}
shiny::shinyApp(ui, server)
library(shiny); runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/scratch.R')
credentials()
credentials
credentials()
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/scratch.R')
?req
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/scratch.R')
library(shiny)
library(shinythemes)
#background color of navbar is 375A7F
ui <- shinyauthr::loginUI('login')
server <- function(input, output, session){
}
library(shiny)
library(shinythemes)
#background color of navbar is 375A7F
ui <- shinyauthr::loginUI('login')
server <- function(input, output, session){
}
shinyApp(ui, server)
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
?secure_server
library(shiny); runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register_ui.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register_ui.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register_ui.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register_ui.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register_ui.R')
library(shiny); runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
checkboxGroupInput('in1', 'Check some letters', choices = head(LETTERS)),
selectizeInput('in2', 'Select a state', choices = state.name),
plotOutput('plot')
)
server <- function(input, output) {
output$plot <- renderPlot({
validate(
need(input$in1, 'Check at least one letter!'),
need(input$in2 != '', 'Please choose a state.')
)
plot(1:10, main = paste(c(input$in1, input$in2), collapse = ', '))
})
}
shinyApp(ui, server)
}
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
library(shiny); runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
?observe
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
get_data <- function(db_name){
conn <- dbConnect(RSQLite::SQLite(),paste0(
'~/Documents/Documents/Side Projects/myWeightLossPal/',
db_name))
user_data <- dbReadTable(conn,'app_users')
dbDisconnect(conn)
return(user_data)
}
chck <- get_data('weightloss.db')
View(chck)
chck <- rbind(chck,c('aa','bb'))
chck
Sys.Date()
sys.time
Sys.Time()
Sys.time()
db_name <- 'weightloss.db'
conn <- dbConnect(RSQLite::SQLite(),paste0(
'~/Documents/Documents/Side Projects/myWeightLossPal/',
db_name))
dbRemoveTable(conn,'app_users')
dbExistsTable(conn,'app_users')
dbRemoveTable(conn,'app_users')
user_data <- dbReadtable(conn,'app_users')
?order
?arrange
library(dplyr)
?arrange
order(chck[,c('user_name','password')])
chck
order(chck[,c('user_name','password')], decreasing=TRUE)
cc <- order(chck[,c('user_name','password')], decreasing=TRUE)
chck[cc,]
order(chck[c('user_name','password')], decreasing=TRUE)
colnames(mtcars)
arrange(chck,user_name,password)
arrange(chck,user_name,password, decreasing=TRUE)
arrange(chck,user_name,password, decreasing=FALSE)
arrange(chck,user_name,desc(password))
chck
arrange(chck,user_name,-password)
?desc
chck['password']
desc(chck['password'])
arrange(chck,desc(password))
arrange(chck,desc(password),user_name)
arrange(chck,password,user_name)
arrange(chck,password,desc(user_name))
user_data <- data.frame('user_name','password','date_created')
View(user_data)
user_data <- data.frame(user_name = character(), password = character(),
date_created = character())
View(user_data)
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
View(user_data)
View(user_data)
colname(user_data) <- c('user_name','password','date_created')
colnames(user_data) <- c('user_name','password','date_created')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
get_app_users <- function(db_name){
conn <- dbConnect(RSQLite::SQLite(),paste0(
'~/Documents/Documents/Side Projects/myWeightLossPal/',
db_name))
user_data <- dbReadTable(conn,'app_users')
dbDisconnect(conn)
return(user_data)
}
app
chck <- get_app_users('weightloss.db')
View(chck)
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
chck <- get_app_users('weightloss.db')
View(chck)
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
library(shiny); runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
View(users_df)
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
?check_credentials
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
View(users_df)
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
check_credentials(user_data)(,)
#checking credentials if they are correct
user_data <- get_app_users('weightloss.db')
names(user_data)[1] <- 'user'
check_credentials(user_data)(,)
check_credentials(user_data)('the_boss','new')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
install.packages('scrypt')
install.packages("scrypt")
credentials <- data.frame(
user = c("fanny", "victor"),
password = c(scrypt::hashPassword("azerty"), scrypt::hashPassword("12345")),
is_hashed_password = TRUE,
stringsAsFactors = FALSE
)
View(credentials)
library(shiny); runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
boolean()
character()
bool()
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
?dbWriteTable
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
library(shiny); runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
View(users_df)
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
if (interactive()) {
library(shiny)
library(shinymanager)
ui <- fluidPage(
tags$h2("Change password module"),
actionButton(
inputId = "ask", label = "Ask to change password"
),
verbatimTextOutput(outputId = "res_pwd")
)
server <- function(input, output, session) {
observeEvent(input$ask, {
insertUI(
selector = "body",
ui = tags$div(
id = "module-pwd",
pwd_ui(id = "pwd")
)
)
})
output$res_pwd <- renderPrint({
reactiveValuesToList(pwd_out)
})
pwd_out <- callModule(
module = pwd_server,
id = "pwd",
user = reactiveValues(user = "me"),
update_pwd = function(user, pwd) {
# store the password somewhere
list(result = TRUE)
}
)
observeEvent(pwd_out$relog, {
removeUI(selector = "#module-pwd")
})
}
shinyApp(ui, server)
}
?pwd_server
if (interactive()) {
library(shiny)
library(shinymanager)
ui <- fluidPage(
tags$h2("Change password module"),
actionButton(
inputId = "ask", label = "Ask to change password"
),
verbatimTextOutput(outputId = "res_pwd")
)
server <- function(input, output, session) {
observeEvent(input$ask, {
insertUI(
selector = "body",
ui = tags$div(
id = "module-pwd",
pwd_ui(id = "pwd")
)
)
})
output$res_pwd <- renderPrint({
reactiveValuesToList(pwd_out)
})
pwd_out <- callModule(
module = pwd_server,
id = "pwd",
user = reactiveValues(user = "me"),
update_pwd = function(user, pwd) {
# store the password somewhere
list(result = TRUE)
},
validate_pwd = NULL
)
observeEvent(pwd_out$relog, {
removeUI(selector = "#module-pwd")
})
}
shinyApp(ui, server)
}
?validate_pwd
if (interactive()) {
library(shiny)
library(shinymanager)
ui <- fluidPage(
tags$h2("Change password module"),
actionButton(
inputId = "ask", label = "Ask to change password"
),
verbatimTextOutput(outputId = "res_pwd")
)
server <- function(input, output, session) {
observeEvent(input$ask, {
insertUI(
selector = "body",
ui = tags$div(
id = "module-pwd",
pwd_ui(id = "pwd")
)
)
})
output$res_pwd <- renderPrint({
reactiveValuesToList(pwd_out)
})
pwd_out <- callModule(
module = pwd_server,
id = "pwd",
user = reactiveValues(user = "me"),
update_pwd = function(user, pwd) {
# store the password somewhere
list(result = TRUE)
},
validate_pwd = function(x) return(TRUE)
)
observeEvent(pwd_out$relog, {
removeUI(selector = "#module-pwd")
})
}
shinyApp(ui, server)
}
library(shiny)
library(shinythemes)
library(shinymanager)
library(shinyjs)
library(scrypt)
?pwd_ui
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
?tidyr::gather
df <- airquality
library(tidyr)
View(df)
gather(df,'metric','value',-c('Ozone','Solar.R','Wind','Temp'))
gather(df,'metric','value',-c('Month','Day'))
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
df <- airquality
gather(df,'metric','value',-c('Month','Day'))
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
?secure_app
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
?set_label
?set_labels
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
cc <- as.Date('2021-05-04')
cc
week(cc)
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
?is.null
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
is.null(NULL)
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
input$daily_cal
input$daily_cal
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
input$date
input$date
length(input$date)
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
?dbWriteTable
#'This function appends the user goals or the daily inputs to the database
conn <- create_db_connection(db_name)
db_name <- 'weightloss.db'
#'This function appends the user goals or the daily inputs to the database
conn <- create_db_connection(db_name)
table_name <- 'user_goals'
#converting database from wide to long
datatable <- dbReadTable(conn, table_name)
colnames(datatable)
dbCreateTable(conn=conn, name='weighing_scale',fields = colnames(datatable))
conn
colnames(datatable)
n <- c('user','date_created','year','month','week_in_yr','metric','value')
dbCreateTable(conn=conn, name='weighing_scale',fields = n)
n
dbCreateTable(conn, 'weighing_scale',n)
dbCreateTable(conn, 'weighing_scale',datatable)
dbRemoveTable(conn, "weighing_scale")
dbCreateTable(conn, "weighing_scale",n)
dbCreateTable(conn, "weighing_scale",datatable)
table_name <- 'weighing_scale'
#converting database from wide to long
datatable <- dbReadTable(conn, table_name)
View(datatable)
Sys.Date()
Sys.DateTime
Sys.Time()
Sys.time()
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
conn <- create_db_connection('weightloss.db')
df <- dbReadTable(conn,'weighing_scale')
View(df)
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
