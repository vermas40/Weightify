runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
library(shinyauthr)
install.packages('shinyauthr')
r
install.packages('remotes')
remotes::install_github("paulc91/shinyauthr")
library(shinyauthr)
library(shiny)
# dataframe that holds usernames, passwords and other user data
user_base <- tibble::tibble(
user = c("user1", "user2"),
password = c("pass1", "pass2"),
permissions = c("admin", "standard"),
name = c("User One", "User Two")
)
ui <- fluidPage(
# add logout button UI
div(class = "pull-right", shinyauthr::logoutUI(id = "logout")),
# add login panel UI function
shinyauthr::loginUI(id = "login"),
# setup table output to show user info after login
tableOutput("user_table")
)
server <- function(input, output, session) {
# call the logout module with reactive trigger to hide/show
logout_init <- callModule(
shinyauthr::logout,
id = "logout",
active = reactive(credentials()$user_auth)
)
# call login module supplying data frame, user and password cols
# and reactive trigger
credentials <- callModule(
shinyauthr::login,
id = "login",
data = user_base,
user_col = user,
pwd_col = password,
log_out = reactive(logout_init())
)
# pulls out the user information returned from login module
user_data <- reactive({
credentials()$info
})
output$user_table <- renderTable({
# use req to only render results when credentials()$user_auth is TRUE
req(credentials()$user_auth)
user_data()
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinydashboard)
library(shinyauthr)
library(dplyr)
library(shinyjs)
library(DT)
# sample logins dataframe with passwords hashed by sodium package
user_base <- tibble(
user = c("user1", "user2"),
password = sapply(c("pass1", "pass2"), sodium::password_store),
permissions = c("admin", "standard"),
name = c("User One", "User Two")
)
ui <- dashboardPage(
# put the shinyauthr logout ui module in here
dashboardHeader(
title = "shinyauthr",
tags$li(class = "dropdown", style = "padding: 8px;", shinyauthr::logoutUI("logout"))
),
# setup a sidebar menu to be rendered server-side
dashboardSidebar(
collapsed = TRUE, sidebarMenuOutput("sidebar")
),
dashboardBody(
shinyjs::useShinyjs(),
# put the shinyauthr login ui module here
shinyauthr::loginUI("login"),
# setup any tab pages you want after login here with uiOutputs
tabItems(
tabItem("tab1", uiOutput("tab1_ui")),
tabItem("tab2", uiOutput("tab2_ui"))
)
)
)
server <- function(input, output, session) {
# login status and info will be managed by shinyauthr module and stores here
credentials <- callModule(shinyauthr::login, "login",
data = user_base,
user_col = user,
pwd_col = password,
sodium_hashed = TRUE,
log_out = reactive(logout_init()))
# logout status managed by shinyauthr module and stored here
logout_init <- callModule(shinyauthr::logout, "logout", reactive(credentials()$user_auth))
# this opens or closes the sidebar on login/logout
observe({
if(credentials()$user_auth) {
shinyjs::removeClass(selector = "body", class = "sidebar-collapse")
} else {
shinyjs::addClass(selector = "body", class = "sidebar-collapse")
}
})
# only when credentials()$user_auth is TRUE, render your desired sidebar menu
output$sidebar <- renderMenu({
req(credentials()$user_auth)
sidebarMenu(
id = "tabs",
menuItem("Storms Data", tabName = "tab1"),
menuItem("Starwars Data", tabName = "tab2")
)
})
# tab 1 UI and output ----------------------------------------
output$tab1_ui <- renderUI({
req(credentials()$user_auth)
DT::DTOutput("table1")
})
output$table1 <- DT::renderDT({
DT::datatable(dplyr::storms, options = list(scrollX = TRUE))
})
# tab 2 UI and output ----------------------------------------
output$tab2_ui <- renderUI({
req(credentials()$user_auth)
DT::DTOutput("table2")
})
output$table2 <- DT::renderDT({
DT::datatable(dplyr::starwars[,1:10], options = list(scrollX = TRUE))
})
}
shiny::shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(shinyauthr)
library(dplyr)
library(shinyjs)
library(DT)
# sample logins dataframe with passwords hashed by sodium package
user_base <- tibble(
user = c("user1", "user2"),
password = sapply(c("pass1", "pass2"), sodium::password_store),
permissions = c("admin", "standard"),
name = c("User One", "User Two")
)
ui <- dashboardPage(
# put the shinyauthr logout ui module in here
dashboardHeader(
title = "shinyauthr",
tags$li(class = "dropdown", style = "padding: 8px;", shinyauthr::logoutUI("logout"))
),
# setup a sidebar menu to be rendered server-side
dashboardSidebar(
collapsed = TRUE, sidebarMenuOutput("sidebar")
),
dashboardBody(
shinyjs::useShinyjs(),
# put the shinyauthr login ui module here
shinyauthr::loginUI("login"),
# setup any tab pages you want after login here with uiOutputs
tabItems(
tabItem("tab1", uiOutput("tab1_ui")),
tabItem("tab2", uiOutput("tab2_ui"))
)
)
)
server <- function(input, output, session) {
# login status and info will be managed by shinyauthr module and stores here
credentials <- callModule(shinyauthr::login, "login",
data = user_base,
user_col = user,
pwd_col = password,
sodium_hashed = TRUE,
log_out = reactive(logout_init()))
# logout status managed by shinyauthr module and stored here
logout_init <- callModule(shinyauthr::logout, "logout", reactive(credentials()$user_auth))
# this opens or closes the sidebar on login/logout
observe({
if(credentials()$user_auth) {
shinyjs::removeClass(selector = "body", class = "sidebar-collapse")
} else {
shinyjs::addClass(selector = "body", class = "sidebar-collapse")
}
})
# only when credentials()$user_auth is TRUE, render your desired sidebar menu
output$sidebar <- renderMenu({
req(credentials()$user_auth)
sidebarMenu(
id = "tabs",
menuItem("Storms Data", tabName = "tab1"),
menuItem("Starwars Data", tabName = "tab2")
)
})
# tab 1 UI and output ----------------------------------------
output$tab1_ui <- renderUI({
req(credentials()$user_auth)
DT::DTOutput("table1")
})
output$table1 <- DT::renderDT({
DT::datatable(dplyr::storms, options = list(scrollX = TRUE))
})
# tab 2 UI and output ----------------------------------------
output$tab2_ui <- renderUI({
req(credentials()$user_auth)
DT::DTOutput("table2")
})
output$table2 <- DT::renderDT({
DT::datatable(dplyr::starwars[,1:10], options = list(scrollX = TRUE))
})
}
shiny::shinyApp(ui, server)
library(shinydashboard)
install.packages('shinydashboard')
install.packages('DT')
library(dplyr)
library(shiny)
library(shinydashboard)
library(shinyauthr)
library(dplyr)
library(shinyjs)
library(DT)
# sample logins dataframe with passwords hashed by sodium package
user_base <- tibble(
user = c("user1", "user2"),
password = sapply(c("pass1", "pass2"), sodium::password_store),
permissions = c("admin", "standard"),
name = c("User One", "User Two")
)
ui <- dashboardPage(
# put the shinyauthr logout ui module in here
dashboardHeader(
title = "shinyauthr",
tags$li(class = "dropdown", style = "padding: 8px;", shinyauthr::logoutUI("logout"))
),
# setup a sidebar menu to be rendered server-side
dashboardSidebar(
collapsed = TRUE, sidebarMenuOutput("sidebar")
),
dashboardBody(
shinyjs::useShinyjs(),
# put the shinyauthr login ui module here
shinyauthr::loginUI("login"),
# setup any tab pages you want after login here with uiOutputs
tabItems(
tabItem("tab1", uiOutput("tab1_ui")),
tabItem("tab2", uiOutput("tab2_ui"))
)
)
)
server <- function(input, output, session) {
# login status and info will be managed by shinyauthr module and stores here
credentials <- callModule(shinyauthr::login, "login",
data = user_base,
user_col = user,
pwd_col = password,
sodium_hashed = TRUE,
log_out = reactive(logout_init()))
# logout status managed by shinyauthr module and stored here
logout_init <- callModule(shinyauthr::logout, "logout", reactive(credentials()$user_auth))
# this opens or closes the sidebar on login/logout
observe({
if(credentials()$user_auth) {
shinyjs::removeClass(selector = "body", class = "sidebar-collapse")
} else {
shinyjs::addClass(selector = "body", class = "sidebar-collapse")
}
})
# only when credentials()$user_auth is TRUE, render your desired sidebar menu
output$sidebar <- renderMenu({
req(credentials()$user_auth)
sidebarMenu(
id = "tabs",
menuItem("Storms Data", tabName = "tab1"),
menuItem("Starwars Data", tabName = "tab2")
)
})
# tab 1 UI and output ----------------------------------------
output$tab1_ui <- renderUI({
req(credentials()$user_auth)
DT::DTOutput("table1")
})
output$table1 <- DT::renderDT({
DT::datatable(dplyr::storms, options = list(scrollX = TRUE))
})
# tab 2 UI and output ----------------------------------------
output$tab2_ui <- renderUI({
req(credentials()$user_auth)
DT::DTOutput("table2")
})
output$table2 <- DT::renderDT({
DT::datatable(dplyr::starwars[,1:10], options = list(scrollX = TRUE))
})
}
shiny::shinyApp(ui, server)
library(shiny); runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/scratch.R')
credentials()
credentials
credentials()
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/scratch.R')
?req
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/scratch.R')
library(shiny)
library(shinythemes)
#background color of navbar is 375A7F
ui <- shinyauthr::loginUI('login')
server <- function(input, output, session){
}
library(shiny)
library(shinythemes)
#background color of navbar is 375A7F
ui <- shinyauthr::loginUI('login')
server <- function(input, output, session){
}
shinyApp(ui, server)
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
?secure_server
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
library(shiny)
register_ui <- navbarPage(title=div(img(src='body-scale.png', style='margin-top:-14px;',
height=45)),
header='', id='main_navbar', windowTitle='My Weight Loss Pal',
theme=shinytheme('darkly'),
tabPanel('Register', register('reg')),
includeCSS('www/bootstrap.css') #including custom css to overwrite darkly theme
)
server <- function(input,output,session){
}
shinyApp(register_ui,server)
library(shiny)
register_ui <- navbarPage(title=div(img(src='body-scale.png', style='margin-top:-14px;',
height=45)),
header='', id='main_navbar', windowTitle='My Weight Loss Pal',
theme=shinytheme('darkly'),
tabPanel('Register', register('reg')),
includeCSS('www/bootstrap.css') #including custom css to overwrite darkly theme
)
server <- function(input,output,session){
}
shinyApp(ui = register_ui,server)
register_ui <- navbarPage(title=div(img(src='body-scale.png', style='margin-top:-14px;',
height=45)),
header='', id='main_navbar', windowTitle='My Weight Loss Pal',
theme=shinytheme('darkly'),
tabPanel('Register', register('reg')),
includeCSS('www/bootstrap.css') #including custom css to overwrite darkly theme
)
library(shiny)
register_ui <- navbarPage(title=div(img(src='body-scale.png', style='margin-top:-14px;',
height=45)),
header='', id='main_navbar', windowTitle='My Weight Loss Pal',
theme=shinytheme('darkly'),
tabPanel('Register'),#, register('reg')),
includeCSS('www/bootstrap.css') #including custom css to overwrite darkly theme
)
server <- function(input,output,session){
}
shinyApp(ui = register_ui,server)
library(shiny)
register_ui <- navbarPage(title=div(img(src='body-scale.png', style='margin-top:-14px;',
height=45)),
header='', id='main_navbar', windowTitle='My Weight Loss Pal',
theme=shinytheme('darkly'),
tabPanel('Register')#, register('reg')),
#includeCSS('www/bootstrap.css') #including custom css to overwrite darkly theme
)
server <- function(input,output,session){
}
shinyApp(ui = register_ui,server)
setwd("~/Documents/Documents/Side Projects/myWeightLossPal/shiny-app")
runApp('register_ui.R')
?secure_app
?auth_ui
runApp()
runApp()
runApp('scratch.R')
runApp()
runApp('scratch.R')
?make_router
?route
runApp()
runApp()
runApp('register_ui.R')
?router
?make_router
library(shiny)
library(shiny.router)
root_page <- div(h2("Root page"))
other_page <- div(h3("Other page"))
router <- make_router(
route("/", root_page),
route("other", other_page)
)
router
?navbarPage
runApp()
runApp()
runApp()
runApp()
runApp('scratch.R')
runApp('app_start.R')
runApp('app_start.R')
library(shiny)
library(shinythemes)
library(shinymanager)
library(shiny.router)
source('track_ui.R')
source('goal_ui.R')
source('register_ui.R')
source('register.R')
source('app.R')
#background color of navbar is 375A7F
#fake credentials to test shiny manager
#background color of navbar is 375A7F
#fake credentials to test shiny manager
credentials <- data.frame(
user = c("1", "fanny", "victor", "benoit"),
password = c("1", "azerty", "12345", "azerty")
)
router <- make_router(
route('/home',main_page),
route("cc", register_ui)
)
ui <- fluidPage(
router$ui
)
runApp('app_start.R')
runApp('app_start.R')
runApp('app_start.R')
runApp('app_start.R')
runApp('app_start.R')
runApp('app_start.R')
runApp('app_start.R')
library(shiny)
library(shinythemes)
library(shinymanager)
library(shiny.router)
source('track_ui.R')
source('goal_ui.R')
source('register_ui.R')
source('register.R')
source('app.R')
main_page
main_page()
runApp('app_start.R')
runApp('app_start.R')
runApp('app_start.R')
runApp('app_start.R')
runApp('app_start.R')
runApp('app_start.R')
runApp('app_start.R')
runApp('app_start.R')
runApp('app_start.R')
runApp('app_start.R')
runApp('app_start.R')
secure_app(main_page)
cc = secure_app(main_page)
cc['ui']
cc$ui
runApp('app_start.R')
runApp('app_start.R')
runApp('app_start.R')
?secure_app
runApp('app_start.R')
?route_link
runApp('app_start.R')
runApp('app_start.R')
runApp('app_start.R')
runApp('app_start.R')
runApp('app_start.R')
runApp('app_start.R')
?shinyApp
runApp('app_start.R')
runApp('app_start.R')
install.packages('rstudioapi')
runApp('app_start.R')
runApp('app_start.R')
runApp('app_start.R')
runApp('register_ui.R')
runApp('register_ui.R')
runApp('register_ui.R')
runApp('register_ui.R')
runApp('register_ui.R')
runApp('register_ui.R')
runApp('app_start.R')
runApp('app_start.R')
runApp('register_ui.R')
runApp('app_start.R')
runApp('app_start.R')
runApp('app_start.R')
runApp('app_start.R')
runApp('app_start.R')
runApp()
runApp()
runApp()
runApp()
runApp('register_ui.R')
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
?actionButton
runApp('register_app/register_ui.R')
runApp('register_ui.R')
runApp('register_ui.R')
runApp('register_ui.R')
runApp('register_ui.R')
