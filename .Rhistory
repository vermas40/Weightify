colnames(user_data) <- c('user','password','date_created','is_hashed_password')
dbWriteTable(conn,'app_users',user_data, overwrite=TRUE)
dbDisconnect(conn)
}
change_pwd <- function(db_name, user_name, password){
#'This function changes password of a user
conn <- create_db_connection(db_name)
user_data <- dbReadTable(conn,'app_users')
#appending new user name and password combo
data <- data.frame(list('user' = user_name,'password' = hashPassword(password),
'date_created' = as.character(Sys.time()),
'is_hashed_password' = TRUE))
user_data <- rbind(user_data, data)
colnames(user_data) <- c('user','password','date_created','is_hashed_password')
#ordering by date_created
#and removing the older observation
user_data <- dplyr::arrange(user_data, desc(date_created), user)
user_data <- user_data[!duplicated(user_data[,'user']),]
dbWriteTable(conn,'app_users',user_data, overwrite=TRUE)
dbDisconnect(conn)
return()
}
create_week_dates <- function(dt){
#'This function creates all the dates for a week
#'Input
#'1. dt: date object, this is the date of entry
#'Returns
#'1. week_dates, r list: list with the dates for a week
dt <- as.Date(dt,'%Y-%m-%d')
sun_dt <- floor_date(dt, unit='week') #by default floor is sunday
week_dates <- c()
for (day in (0:6)){
week_dates <- c(week_dates, as.character(sun_dt+day))
}
week_dates <- data.frame(week_dates)
colnames(week_dates) <- c('date')
week_dates['year'] = year(dt)
week_dates['month'] = month(dt)
week_dates['week_in_yr'] = epiweek(dt)
return(week_dates)
}
get_last_week_cal_data <- function(user, db_name){
conn <- create_db_connection(db_name)
user_data <- dbReadTable(conn,'user_performance')
user_data <- user_data[which(user_data['user'] == user),]
user_data['week_in_yr'] <- user_data['week_in_yr'] + 1
user_data <- user_data %>%
pivot_wider(id_cols = c('user','year','week_in_yr'),
names_from = 'metric', values_from = 'value')
user_data <- user_data[c('user','year','week_in_yr','wt','cal')]
user_data <- user_data %>% dplyr::rename(wt_lst_wk = wt, cal_lst_wk = cal)
return(user_data)
}
create_week_calendar_data <- function(df){
#'This function creates the entries for an entire week
#appending the latest record with previous records of the user
#this appending is important since the df that is coming as argument
#only consists of the one record entered by the user
conn <- create_db_connection('weightloss.db')
weight_df <- dbReadTable(conn, 'weighing_scale')
weight_df <- weight_df %>%
pivot_wider(id_cols = c('user','date_created','date','year',
'month','week_in_yr'),
names_from='metric', values_from='value')
#filtering for only the required user
weight_df <- weight_df[which(weight_df['user'] == unique(df[['user']])),]
weight_df <- rbind(weight_df, df)
#removing all entries greater than current date so that
#the latest weight and calories can get copied over
weight_df <- weight_df[which(weight_df['date'] <= df[['date']]),]
#sorting & removing duplicates
weight_df <- dplyr::arrange(weight_df, desc(date_created), user)
weight_df <- weight_df[!duplicated(weight_df[,c('user','date')]),]
week_dates <- create_week_dates(df[['date']])
week_cal_data <-merge(week_dates, weight_df, by=c('date','year','month',
'week_in_yr'),
all.x=TRUE)
#experimental, entered by shivam on 10/10/21
#browser()
sys_gen_obs <- which(week_cal_data['source']=='system_generated')
week_cal_data[sys_gen_obs, c('date_created',
'wt','cal','source')] <- NA
#experimental overs
week_cal_data <- week_cal_data %>%
dplyr::group_by(year, month, week_in_yr) %>%
fill(c('user','date_created','year','month','week_in_yr'),
.direction='downup') %>%
fill(c('wt','cal'), .direction='down') %>%
dplyr::ungroup()
week_cal_data <- as.data.frame(week_cal_data)
last_week_cal_data <- get_last_week_cal_data(unique(week_cal_data[which(is.na(week_cal_data['user'])==F),
'user']),
'weightloss.db')
week_cal_data <- merge(week_cal_data, last_week_cal_data,
by=c('user','year','week_in_yr'), all.x = TRUE)
#imputing missing values with last week's data
week_cal_data[is.na(week_cal_data['source']),'source'] <- 'system_generated'
cal_miss_idx <- is.na(week_cal_data['cal'])
wt_miss_idx <- is.na(week_cal_data['wt'])
week_cal_data[cal_miss_idx,'cal'] <- week_cal_data[cal_miss_idx,'cal_lst_wk']
week_cal_data[wt_miss_idx,'wt'] <- week_cal_data[cal_miss_idx,'wt_lst_wk']
#if there are still missing values then backward fill
#browser()
week_cal_data <- week_cal_data %>%
dplyr::group_by(year, month, week_in_yr) %>%
fill(c('wt','cal'), .direction='up') %>%
dplyr::ungroup()
week_cal_data <- week_cal_data[,c('user','date_created','date','year','month',
'week_in_yr','wt','cal','source')]
return(week_cal_data)
}
update_db <- function(db_name, app_data, table_name, fx='goals'){
#'This function appends the user goals or the daily inputs to the database
conn <- create_db_connection(db_name)
#converting database from wide to long
datatable <- dbReadTable(conn, table_name)
app_data <- gather(app_data, 'metric', 'value', -c('user','date_created','year',
'month','week_in_yr','date'))
#appending the observations
#making sure the order of columns is exactly the same
datatable <- datatable[,c('user','date_created','date','year','month',
'week_in_yr','metric','value')]
datatable <- rbind(datatable, app_data)
#keeping only the latest goal/entry
datatable <- dplyr::arrange(datatable, desc(date_created), user)
if (fx=='goals'){
datatable <- datatable[!duplicated(datatable[,c('user','metric')]),]
}else{
datatable <- datatable[!duplicated(datatable[,c('date','user','metric')]),]
}
dbWriteTable(conn, table_name, datatable, overwrite=TRUE)
dbDisconnect(conn)
return()
}
conn <- create_db_connection('weightloss.db')
df <- dbReadTable(conn,'weighing_scale')
library(shiny)
library(shinythemes)
library(shinymanager)
library(shinyjs)
library(scrypt)
library(DBI)
library(RSQLite)
library(docstring)
library(lubridate)
library(dplyr) #this might introduce bugs, keep an eye
library(tidyr)
library(httr)
library(plotly)
conn <- create_db_connection('weightloss.db')
df <- dbReadTable(conn,'weighing_scale')
View(df)
df <- df[which(df['user']=='a226733'),]
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
View(df)
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
create_db_connection <- function(db_name){
conn <- dbConnect(RSQLite::SQLite(),paste0(
'~/Documents/Documents/Side Projects/myWeightLossPal/',
db_name))
return(conn)
}
get_app_users <- function(db_name){
conn <- create_db_connection(db_name)
user_data <- dbReadTable(conn,'app_users')
dbDisconnect(conn)
return(user_data)
}
get_user_goals <- function(db_name){
conn <- create_db_connection(db_name)
user_goals <- dbReadTable(conn,'user_goals')
dbDisconnect(conn)
return(user_goals)
}
create_acct <- function(db_name, user_name, password){
#This function inserts data into the app user database table
conn <- create_db_connection(db_name)
user_data <- dbReadTable(conn,'app_users')
#appending new observations
data <- data.frame(list('user' = user_name,'password' = hashPassword(password),
'date_created' = as.character(Sys.time()),
'is_hashed_password' = TRUE))
user_data <- rbind(user_data, data)
colnames(user_data) <- c('user','password','date_created','is_hashed_password')
dbWriteTable(conn,'app_users',user_data, overwrite=TRUE)
dbDisconnect(conn)
}
change_pwd <- function(db_name, user_name, password){
#'This function changes password of a user
conn <- create_db_connection(db_name)
user_data <- dbReadTable(conn,'app_users')
#appending new user name and password combo
data <- data.frame(list('user' = user_name,'password' = hashPassword(password),
'date_created' = as.character(Sys.time()),
'is_hashed_password' = TRUE))
user_data <- rbind(user_data, data)
colnames(user_data) <- c('user','password','date_created','is_hashed_password')
#ordering by date_created
#and removing the older observation
user_data <- dplyr::arrange(user_data, desc(date_created), user)
user_data <- user_data[!duplicated(user_data[,'user']),]
dbWriteTable(conn,'app_users',user_data, overwrite=TRUE)
dbDisconnect(conn)
return()
}
create_week_dates <- function(dt){
#'This function creates all the dates for a week
#'Input
#'1. dt: date object, this is the date of entry
#'Returns
#'1. week_dates, r list: list with the dates for a week
dt <- as.Date(dt,'%Y-%m-%d')
sun_dt <- floor_date(dt, unit='week') #by default floor is sunday
week_dates <- c()
for (day in (0:6)){
week_dates <- c(week_dates, as.character(sun_dt+day))
}
week_dates <- data.frame(week_dates)
colnames(week_dates) <- c('date')
week_dates['year'] = year(dt)
week_dates['month'] = month(dt)
week_dates['week_in_yr'] = epiweek(dt)
return(week_dates)
}
get_last_week_cal_data <- function(user, db_name){
conn <- create_db_connection(db_name)
user_data <- dbReadTable(conn,'user_performance')
user_data <- user_data[which(user_data['user'] == user),]
user_data['week_in_yr'] <- user_data['week_in_yr'] + 1
user_data <- user_data %>%
pivot_wider(id_cols = c('user','year','week_in_yr'),
names_from = 'metric', values_from = 'value')
user_data <- user_data[c('user','year','week_in_yr','wt','cal')]
user_data <- user_data %>% dplyr::rename(wt_lst_wk = wt, cal_lst_wk = cal)
return(user_data)
}
create_week_calendar_data <- function(df){
#'This function creates the entries for an entire week
#appending the latest record with previous records of the user
#this appending is important since the df that is coming as argument
#only consists of the one record entered by the user
conn <- create_db_connection('weightloss.db')
weight_df <- dbReadTable(conn, 'weighing_scale')
weight_df <- weight_df %>%
pivot_wider(id_cols = c('user','date_created','date','year',
'month','week_in_yr'),
names_from='metric', values_from='value')
#filtering for only the required user
weight_df <- weight_df[which(weight_df['user'] == unique(df[['user']])),]
weight_df <- rbind(weight_df, df)
#removing all entries greater than current date so that
#the latest weight and calories can get copied over
weight_df <- weight_df[which(weight_df['date'] <= df[['date']]),]
#sorting & removing duplicates
weight_df <- dplyr::arrange(weight_df, desc(date_created), user)
weight_df <- weight_df[!duplicated(weight_df[,c('user','date')]),]
week_dates <- create_week_dates(df[['date']])
week_cal_data <-merge(week_dates, weight_df, by=c('date','year','month',
'week_in_yr'),
all.x=TRUE)
#experimental, entered by shivam on 10/10/21
#browser()
sys_gen_obs <- which(week_cal_data['source']=='system_generated')
week_cal_data[sys_gen_obs, c('date_created',
'wt','cal','source')] <- NA
#experimental overs
week_cal_data <- week_cal_data %>%
dplyr::group_by(year, month, week_in_yr) %>%
fill(c('user','date_created','year','month','week_in_yr'),
.direction='downup') %>%
fill(c('wt','cal'), .direction='down') %>%
dplyr::ungroup()
week_cal_data <- as.data.frame(week_cal_data)
last_week_cal_data <- get_last_week_cal_data(unique(week_cal_data[which(is.na(week_cal_data['user'])==F),
'user']),
'weightloss.db')
week_cal_data <- merge(week_cal_data, last_week_cal_data,
by=c('user','year','week_in_yr'), all.x = TRUE)
#imputing missing values with last week's data
week_cal_data[is.na(week_cal_data['source']),'source'] <- 'system_generated'
cal_miss_idx <- is.na(week_cal_data['cal'])
wt_miss_idx <- is.na(week_cal_data['wt'])
week_cal_data[cal_miss_idx,'cal'] <- week_cal_data[cal_miss_idx,'cal_lst_wk']
week_cal_data[wt_miss_idx,'wt'] <- week_cal_data[cal_miss_idx,'wt_lst_wk']
#if there are still missing values then backward fill
#browser()
week_cal_data <- week_cal_data %>%
dplyr::group_by(year, month, week_in_yr) %>%
fill(c('wt','cal'), .direction='up') %>%
dplyr::ungroup()
week_cal_data <- week_cal_data[,c('user','date_created','date','year','month',
'week_in_yr','wt','cal','source')]
return(week_cal_data)
}
update_db <- function(db_name, app_data, table_name, fx='goals'){
#'This function appends the user goals or the daily inputs to the database
conn <- create_db_connection(db_name)
#converting database from wide to long
datatable <- dbReadTable(conn, table_name)
app_data <- gather(app_data, 'metric', 'value', -c('user','date_created','year',
'month','week_in_yr','date'))
#appending the observations
#making sure the order of columns is exactly the same
datatable <- datatable[,c('user','date_created','date','year','month',
'week_in_yr','metric','value')]
datatable <- rbind(datatable, app_data)
#keeping only the latest goal/entry
datatable <- dplyr::arrange(datatable, desc(date_created), user)
if (fx=='goals'){
datatable <- datatable[!duplicated(datatable[,c('user','metric')]),]
}else{
datatable <- datatable[!duplicated(datatable[,c('date','user','metric')]),]
}
dbWriteTable(conn, table_name, datatable, overwrite=TRUE)
dbDisconnect(conn)
return()
}
conn <- create_db_connection('weightloss.db')
df <- dbReadTable(conn,'tdee_hist')
library(shiny)
library(shinythemes)
library(shinymanager)
library(shinyjs)
library(scrypt)
library(DBI)
library(RSQLite)
library(docstring)
library(lubridate)
library(dplyr) #this might introduce bugs, keep an eye
library(tidyr)
library(httr)
library(plotly)
conn <- create_db_connection('weightloss.db')
df <- dbReadTable(conn,'tdee_hist')
View(df)
df <- df[which(df['user']=='123'),]
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
library(shiny); runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
R
r
packrat
library(packrat)
install.packages('packrat')
library(packrat)
snapshot()
?snapshot
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app/register.R')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
conn <- create_db_connection('weightloss.db')
df <- dbReadTable(conn,'weighing_scale')
df <- df[which(df['user']=='zeus'),]
View(df)
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
?runApp
?shiny::runApp
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
shiny::runApp('Documents/Documents/Side Projects/myWeightLossPal/shiny-app')
?shiny::runApp
library(shiny)
library(shinythemes)
library(shinymanager)
library(shinyjs)
library(scrypt)
library(DBI)
library(RSQLite)
library(docstring)
library(lubridate)
library(dplyr)
library(tidyr)
library(httr)
library(plotly)
source('track/track_ui.R')
source('track/goal_ui.R')
source('track/daily_input_ui.R')
source('login/pass_change_ui.R')
source('functions/helper_functions.R')
source('functions/plotting_functions.R')
source('functions/sql_queries.R')
#background color of navbar is 375A7F
options(shiny.port = 4000)
options(shiny.host = "0.0.0.0")
set_labels(
language = 'en',
'Please authenticate' = 'Get back into it'
)
ui <- secure_app(
navbarPage(title=div(img(src='body-scale.png', style='margin-top:-14px;',
height=45)),
header='', id='main_navbar', windowTitle='My Weight Loss Pal',
theme=shinytheme('darkly'),
tabPanel('Track', track_ui('track')),
tabPanel('Change Password',pass_change_ui('pass')),
includeCSS('www/bootstrap.css') #including custom css to overwrite darkly theme
), theme = shinytheme('darkly'), #using darkly theme for login dialog box
#making background black gradient for the rest of the page
#and adding a background
background = "linear-gradient(rgba(48, 48, 48, 0.5),
rgba(48, 48, 48, 0.5)),
url('icons.png');",
tags_bottom = tags$div(
tags$p(
"New User? ",
tags$a(
href = "//127.0.0.1:8000", #linking to the registration app
target="_blank", "Create an account"
)
)
) #close tags_bottom
)#close secure_app
server <- function(input,output,session){
#pulling the app users data
user_data <- get_app_users('weightloss.db')
#checking credentials if they are correct
result_auth <- secure_server(check_credentials = check_credentials(user_data))
#if user changes tab to change password tab then run the below code
observeEvent(input$main_navbar,{
user <- reactiveValuesToList(result_auth)[['user']]
if (input$main_navbar == 'Change Password'){
callModule(pass_server, 'pass', user)
}else if (input$main_navbar == 'Track'){
callModule(goal_server, 'goal', user)
callModule(daily_input_server, 'daily', user)
}
})
}
shinyApp(ui = ui, server = server)
runApp()
?install_version
?remotes::install_version
remotes::install_version('margrittr')
install.packages('margrittr')
remotes::install_version('magrittr')
install_version(rlang)
devtools::install_version(rlang)
remotes::install_version(rlang)
remotes::install_version('rlang', version = '')
remotes::install_version('rlang')
remotes::install_version('rlang', version=NULL)
#This script installs all the required packages for the project
if('remotes' %in% rownames(installed.packages())){
library(remotes)
}else{
install.packages('remotes')
library(remotes)
}
pkg_list <- read.csv('requirements.csv')
setwd("~/Documents/Documents/Side Projects/myWeightLossPal/shiny-app")
#This script installs all the required packages for the project
if('remotes' %in% rownames(installed.packages())){
library(remotes)
}else{
install.packages('remotes')
library(remotes)
}
pkg_list <- read.csv('requirements.csv')
View(pkg_list)
names(pkg_list)[1] <- 'pkg'
new_pkg_idx <- which(!pkg_list[['pkg']] %in% rownames(installed.packages()))
pkg_list <- pkg_list[new_pkg_idx,]
remove.packages('rlang')
remove.packages('shinymanager')
pkg_list <- read.csv('requirements.csv')
names(pkg_list)[1] <- 'pkg'
new_pkg_idx <- which(!pkg_list[['pkg']] %in% rownames(installed.packages()))
pkg_list <- pkg_list[new_pkg_idx,]
View(pkg_list)
if(nrow(pkg_list) > 0){
apply(pkg_list,1,function(x) install_version(x[['pkg']],
version = as.character(x[['ver']])))
}
if(nrow(pkg_list) > 0){
apply(pkg_list,1,function(x) install_version(x[['pkg']],
version = ifelse(is.null(x[['ver']],
NULL,
as.character(x[['ver']])))))
}
if(nrow(pkg_list) > 0){
apply(pkg_list,1,function(x) install_version(x[['pkg']],
version = ifelse(is.null(x[['ver']],
NULL,
as.character(x[['ver']])))))
}
if(nrow(pkg_list) > 0){
apply(pkg_list,1,function(x) print(x[['ver']]))}
if(nrow(pkg_list) > 0){
apply(pkg_list,1,function(x) is.null(x[['ver']]))}
for (obs in rownames(pkg_list)){
install_version(pkg_list[obs,'pkg'],
versions = ifelse(is.null(pkg_list[obs,'ver']), NULL,
pkg_list[obs,'ver']))
}
shiny::runApp()
runApp()
