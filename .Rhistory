diff(as.vector(df['wt']),1)
as.vector(df['wt'])
as.matrix(df['wt'])
diff(as.matrix(df['wt']))
diff(as.vector(df['wt']))
diff(as.numeric(df['wt']))
pull_plot_data <- function(user, db_name){
#'This function subsets the database for a particular user
conn <- create_db_connection(db_name)
user_weight_history <- gsub('\n', '', user_weight_history)
qry <- paste0(user_weight_history, user, "'")
df <- dbGetQuery(conn, qry)
return(df)
}
make_plot_df <- function(user, db_name){
browser()
df <- pull_plot_data(user, db_name)
df <- df %>%
pivot_wider(id_cols=c('date','year','month','week_in_yr'),
names_from='metric', values_from='value')
df <- as.data.frame(df)
df <- df[which(df['source']=='user_generated'),]
df['wt_lost'] = diff(as.vector(df['wt']),1)
return(df)
}
cc <- make_plot_df('sv','weightloss.db')
str(df)
pull_plot_data <- function(user, db_name){
#'This function subsets the database for a particular user
conn <- create_db_connection(db_name)
user_weight_history <- gsub('\n', '', user_weight_history)
qry <- paste0(user_weight_history, user, "'")
df <- dbGetQuery(conn, qry)
return(df)
}
make_plot_df <- function(user, db_name){
browser()
df <- pull_plot_data(user, db_name)
df <- df %>%
pivot_wider(id_cols=c('date','year','month','week_in_yr'),
names_from='metric', values_from='value')
df <- as.data.frame(df)
df <- df[which(df['source']=='user_generated'),]
df['wt'] <- apply(df['wt'], 1, function(x) as.numeric(x))
df['wt_lost'] = diff(as.vector(df['wt']),1)
return(df)
}
cc <- make_plot_df('sv','weightloss.db')
str(df)
diff(as.vector(df['wt']))
diff(df['wt'])
as.vector(diff(df['wt']))
pull_plot_data <- function(user, db_name){
#'This function subsets the database for a particular user
conn <- create_db_connection(db_name)
user_weight_history <- gsub('\n', '', user_weight_history)
qry <- paste0(user_weight_history, user, "'")
df <- dbGetQuery(conn, qry)
return(df)
}
make_plot_df <- function(user, db_name){
browser()
df <- pull_plot_data(user, db_name)
df <- df %>%
pivot_wider(id_cols=c('date','year','month','week_in_yr'),
names_from='metric', values_from='value') %>%
mutate(diff = wt - lag(wt, default = wt[1]))
df <- as.data.frame(df)
df <- df[which(df['source']=='user_generated'),]
df['wt'] <- apply(df['wt'], 1, function(x) as.numeric(x))
df['wt_lost'] = diff(as.vector(df['wt']),1)
return(df)
}
cc <- make_plot_df('sv','weightloss.db')
library(shiny)
library(shinythemes)
library(shinymanager)
library(shinyjs)
library(scrypt)
library(DBI)
library(RSQLite)
library(docstring)
library(lubridate)
library(dplyr) #this might introduce bugs, keep an eye
library(tidyr)
library(httr)
pull_plot_data <- function(user, db_name){
#'This function subsets the database for a particular user
conn <- create_db_connection(db_name)
user_weight_history <- gsub('\n', '', user_weight_history)
qry <- paste0(user_weight_history, user, "'")
df <- dbGetQuery(conn, qry)
return(df)
}
make_plot_df <- function(user, db_name){
browser()
df <- pull_plot_data(user, db_name)
df <- df %>%
pivot_wider(id_cols=c('date','year','month','week_in_yr'),
names_from='metric', values_from='value') %>%
mutate(diff = wt - lag(wt, default = wt[1]))
df <- as.data.frame(df)
df <- df[which(df['source']=='user_generated'),]
df['wt'] <- apply(df['wt'], 1, function(x) as.numeric(x))
df['wt_lost'] = diff(as.vector(df['wt']),1)
return(df)
}
cc <- make_plot_df('sv','weightloss.db')
pull_plot_data <- function(user, db_name){
#'This function subsets the database for a particular user
conn <- create_db_connection(db_name)
user_weight_history <- gsub('\n', '', user_weight_history)
qry <- paste0(user_weight_history, user, "'")
df <- dbGetQuery(conn, qry)
return(df)
}
make_plot_df <- function(user, db_name){
browser()
df <- pull_plot_data(user, db_name)
df <- df %>%
pivot_wider(id_cols=c('date','year','month','week_in_yr'),
names_from='metric', values_from='value') %>%
mutate(diff = as.numeric(wt) - lag(wt, default = as.numeric(wt[1])))
df <- as.data.frame(df)
df <- df[which(df['source']=='user_generated'),]
df['wt'] <- apply(df['wt'], 1, function(x) as.numeric(x))
df['wt_lost'] = diff(as.vector(df['wt']),1)
return(df)
}
cc <- make_plot_df('sv','weightloss.db')
pull_plot_data <- function(user, db_name){
#'This function subsets the database for a particular user
conn <- create_db_connection(db_name)
user_weight_history <- gsub('\n', '', user_weight_history)
qry <- paste0(user_weight_history, user, "'")
df <- dbGetQuery(conn, qry)
return(df)
}
make_plot_df <- function(user, db_name){
browser()
df <- pull_plot_data(user, db_name)
df <- df %>%
pivot_wider(id_cols=c('date','year','month','week_in_yr'),
names_from='metric', values_from='value') %>%
mutate(diff = as.numeric(wt) - lag(as.numeric(wt), default = as.numeric(wt[1])))
df <- as.data.frame(df)
df <- df[which(df['source']=='user_generated'),]
df['wt'] <- apply(df['wt'], 1, function(x) as.numeric(x))
df['wt_lost'] = diff(as.vector(df['wt']),1)
return(df)
}
cc <- make_plot_df('sv','weightloss.db')
View(df)
pull_plot_data <- function(user, db_name){
#'This function subsets the database for a particular user
conn <- create_db_connection(db_name)
user_weight_history <- gsub('\n', '', user_weight_history)
qry <- sprintf(user_weight_history, user)
df <- dbGetQuery(conn, qry)
return(df)
}
make_plot_df <- function(user, db_name){
browser()
df <- pull_plot_data(user, db_name)
df <- df %>%
pivot_wider(id_cols=c('date','year','month','week_in_yr'),
names_from='metric', values_from='value') %>%
mutate(diff = as.numeric(wt) - lag(as.numeric(wt), default = as.numeric(wt[1])))
df <- as.data.frame(df)
df <- df[which(df['source']=='user_generated'),]
return(df)
}
cc <- make_plot_df('sv','weightloss.db')
pull_plot_data <- function(user, db_name){
#'This function subsets the database for a particular user
conn <- create_db_connection(db_name)
user_weight_history <- gsub('\n', '', user_weight_history)
qry <- sprintf(user_weight_history, user)
df <- dbGetQuery(conn, qry)
return(df)
}
make_plot_df <- function(user, db_name){
browser()
df <- pull_plot_data(user, db_name)
df <- df %>%
pivot_wider(id_cols=c('date','year','month','week_in_yr'),
names_from='metric', values_from='value') %>%
mutate(diff = as.numeric(wt) - lag(as.numeric(wt), default = as.numeric(wt[1])))
df <- as.data.frame(df)
df <- df[which(df['source']=='user_generated'),]
return(df)
}
cc <- make_plot_df('sv','weightloss.db')
library(shiny)
library(shinythemes)
library(shinymanager)
library(shinyjs)
library(scrypt)
library(DBI)
library(RSQLite)
library(docstring)
library(lubridate)
library(dplyr) #this might introduce bugs, keep an eye
library(tidyr)
library(httr)
source('track/track_ui.R')
source('track/goal_ui.R')
source('track/daily_input_ui.R')
source('login/pass_change_ui.R')
source('functions/helper_functions.R')
source('functions/sql_queries.R')
#background color of navbar is 375A7F
options(shiny.port = 4000)
set_labels(
language = 'en',
'Please authenticate' = 'Get Started'
)
ui <- secure_app(
navbarPage(title=div(img(src='body-scale.png', style='margin-top:-14px;',
height=45)),
header='', id='main_navbar', windowTitle='My Weight Loss Pal',
theme=shinytheme('darkly'),
tabPanel('Track', track_ui('track')),
tabPanel('Change Password',pass_change_ui('pass')),
includeCSS('www/bootstrap.css') #including custom css to overwrite darkly theme
), theme = shinytheme('darkly'), #using darkly theme for login dialog box
#making background black gradient for the rest of the page
#and adding a background
background = "linear-gradient(rgba(48, 48, 48, 0.5),
rgba(48, 48, 48, 0.5)),
url('icons.png');",
tags_bottom = tags$div(
tags$p(
"New User? ",
tags$a(
href = "//127.0.0.1:8000", #linking to the registration app
target="_blank", "Create an account"
)
)
) #close tags_bottom
)#close secure_app
server <- function(input,output,session){
#pulling the app users data
user_data <- get_app_users('weightloss.db')
#checking credentials if they are correct
result_auth <- secure_server(check_credentials = check_credentials(user_data))
#if user changes tab to change password tab then run the below code
observeEvent(input$main_navbar,{
user <- reactiveValuesToList(result_auth)[['user']]
if (input$main_navbar == 'Change Password'){
callModule(pass_server, 'pass', user)
}else if (input$main_navbar == 'Track'){
callModule(goal_server, 'goal', user)
callModule(daily_input_server, 'daily', user)
}
})
}
shinyApp(ui = ui, server = server)
pull_plot_data <- function(user, db_name){
#'This function subsets the database for a particular user
conn <- create_db_connection(db_name)
user_weight_history <- gsub('\n', '', user_weight_history)
qry <- sprintf(user_weight_history, user)
df <- dbGetQuery(conn, qry)
return(df)
}
make_plot_df <- function(user, db_name){
browser()
df <- pull_plot_data(user, db_name)
df <- df %>%
pivot_wider(id_cols=c('date','year','month','week_in_yr'),
names_from='metric', values_from='value') %>%
mutate(diff = as.numeric(wt) - lag(as.numeric(wt), default = as.numeric(wt[1])))
df <- as.data.frame(df)
df <- df[which(df['source']=='user_generated'),]
return(df)
}
cc <- make_plot_df('sv','weightloss.db')
View(df)
pull_plot_data <- function(user, db_name){
#'This function subsets the database for a particular user
conn <- create_db_connection(db_name)
user_weight_history <- gsub('\n', '', user_weight_history)
qry <- sprintf(user_weight_history, user)
df <- dbGetQuery(conn, qry)
return(df)
}
make_plot_df <- function(user, db_name){
browser()
df <- pull_plot_data(user, db_name)
df <- df %>%
pivot_wider(id_cols=c('date','year','month','week_in_yr'),
names_from='metric', values_from='value') %>%
filter(source = 'user_generated') %>%
mutate(diff = as.numeric(wt) - lag(as.numeric(wt), default = as.numeric(wt[1])))
df <- as.data.frame(df)
return(df)
}
cc <- make_plot_df('sv','weightloss.db')
pull_plot_data <- function(user, db_name){
#'This function subsets the database for a particular user
conn <- create_db_connection(db_name)
user_weight_history <- gsub('\n', '', user_weight_history)
qry <- sprintf(user_weight_history, user)
df <- dbGetQuery(conn, qry)
return(df)
}
make_plot_df <- function(user, db_name){
browser()
df <- pull_plot_data(user, db_name)
df <- df %>%
pivot_wider(id_cols=c('date','year','month','week_in_yr'),
names_from='metric', values_from='value') %>%
filter(source == 'user_generated') %>%
mutate(diff = as.numeric(wt) - lag(as.numeric(wt), default = as.numeric(wt[1])))
df <- as.data.frame(df)
return(df)
}
cc <- make_plot_df('sv','weightloss.db')
View(df)
View(cc)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(df)
str(df)
runApp()
View(df)
str(df)
runApp()
runApp()
runApp()
df <- dbReadTable(conn, 'user_goals')
View(df)
runApp()
runApp()
View(df)
qry
runApp()
View(df)
runApp()
runApp()
runApp('register.R')
runApp('register.R')
runApp('register.R')
?navbarPage
runApp('register.R')
runApp('register.R')
tags$img
?tags$img
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp()
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp()
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp()
runApp()
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp()
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp()
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
?shinydashboard::box
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp()
runApp('register.R')
runApp()
runApp('register.R')
runApp()
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp()
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp()
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp()
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp()
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp()
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
?div
?div.emptyDiv
runApp('register.R')
runApp('register.R')
runApp()
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp('register.R')
runApp()
runApp('register.R')
